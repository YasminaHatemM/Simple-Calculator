
Calculator_p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002cdc  00002d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007a  0080007a  00002d8a  2**0
                  ALLOC
  3 .stab         00002514  00000000  00000000  00002d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000de1  00000000  00000000  000052a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006081  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000061c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a001  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 87 0b 	call	0x170e	; 0x170e <main>
      8a:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPinDir>:
#include "BIT_MATH.h"
#include "DIO_Interface.h"
#include "DIO_Private.h"

void DIO_SetPinDir(u8 port, u8 pin, u8 dir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_SetPinDir+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
     b56:	4b 83       	std	Y+3, r20	; 0x03
    if(dir == Input)
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	88 23       	and	r24, r24
     b5c:	09 f0       	breq	.+2      	; 0xb60 <DIO_SetPinDir+0x1a>
     b5e:	61 c0       	rjmp	.+194    	; 0xc22 <DIO_SetPinDir+0xdc>
    {
        if (port == Port_A)
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	88 23       	and	r24, r24
     b64:	a9 f4       	brne	.+42     	; 0xb90 <DIO_SetPinDir+0x4a>
            CLR_BIT(DDRA, pin);
     b66:	aa e3       	ldi	r26, 0x3A	; 58
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ea e3       	ldi	r30, 0x3A	; 58
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	48 2f       	mov	r20, r24
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <DIO_SetPinDir+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <DIO_SetPinDir+0x3a>
     b88:	80 95       	com	r24
     b8a:	84 23       	and	r24, r20
     b8c:	8c 93       	st	X, r24
     b8e:	a8 c0       	rjmp	.+336    	; 0xce0 <DIO_SetPinDir+0x19a>
        else if (port == Port_B)
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	a9 f4       	brne	.+42     	; 0xbc0 <DIO_SetPinDir+0x7a>
            CLR_BIT(DDRB, pin);
     b96:	a7 e3       	ldi	r26, 0x37	; 55
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e7 e3       	ldi	r30, 0x37	; 55
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_SetPinDir+0x6e>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_SetPinDir+0x6a>
     bb8:	80 95       	com	r24
     bba:	84 23       	and	r24, r20
     bbc:	8c 93       	st	X, r24
     bbe:	90 c0       	rjmp	.+288    	; 0xce0 <DIO_SetPinDir+0x19a>
        else if (port == Port_C)
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	a9 f4       	brne	.+42     	; 0xbf0 <DIO_SetPinDir+0xaa>
            CLR_BIT(DDRC, pin);
     bc6:	a4 e3       	ldi	r26, 0x34	; 52
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e4 e3       	ldi	r30, 0x34	; 52
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	48 2f       	mov	r20, r24
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 2e       	mov	r0, r18
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <DIO_SetPinDir+0x9e>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <DIO_SetPinDir+0x9a>
     be8:	80 95       	com	r24
     bea:	84 23       	and	r24, r20
     bec:	8c 93       	st	X, r24
     bee:	78 c0       	rjmp	.+240    	; 0xce0 <DIO_SetPinDir+0x19a>
        else if (port == Port_D)
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <DIO_SetPinDir+0xb2>
     bf6:	74 c0       	rjmp	.+232    	; 0xce0 <DIO_SetPinDir+0x19a>
            CLR_BIT(DDRD, pin);
     bf8:	a1 e3       	ldi	r26, 0x31	; 49
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e1 e3       	ldi	r30, 0x31	; 49
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	02 2e       	mov	r0, r18
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <DIO_SetPinDir+0xd0>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	0a 94       	dec	r0
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <DIO_SetPinDir+0xcc>
     c1a:	80 95       	com	r24
     c1c:	84 23       	and	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	5f c0       	rjmp	.+190    	; 0xce0 <DIO_SetPinDir+0x19a>
    }

    else if(dir == Output)
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	09 f0       	breq	.+2      	; 0xc2a <DIO_SetPinDir+0xe4>
     c28:	5b c0       	rjmp	.+182    	; 0xce0 <DIO_SetPinDir+0x19a>
    {
        if (port == Port_A)
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	88 23       	and	r24, r24
     c2e:	a1 f4       	brne	.+40     	; 0xc58 <DIO_SetPinDir+0x112>
            SET_BIT(DDRA, pin);
     c30:	aa e3       	ldi	r26, 0x3A	; 58
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	ea e3       	ldi	r30, 0x3A	; 58
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_SetPinDir+0x108>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_SetPinDir+0x104>
     c52:	84 2b       	or	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	44 c0       	rjmp	.+136    	; 0xce0 <DIO_SetPinDir+0x19a>
        else if (port == Port_B)
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	a1 f4       	brne	.+40     	; 0xc86 <DIO_SetPinDir+0x140>
            SET_BIT(DDRB, pin);
     c5e:	a7 e3       	ldi	r26, 0x37	; 55
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e7 e3       	ldi	r30, 0x37	; 55
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <DIO_SetPinDir+0x136>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <DIO_SetPinDir+0x132>
     c80:	84 2b       	or	r24, r20
     c82:	8c 93       	st	X, r24
     c84:	2d c0       	rjmp	.+90     	; 0xce0 <DIO_SetPinDir+0x19a>
        else if (port == Port_C)
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	a1 f4       	brne	.+40     	; 0xcb4 <DIO_SetPinDir+0x16e>
            SET_BIT(DDRC, pin);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_SetPinDir+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_SetPinDir+0x160>
     cae:	84 2b       	or	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	16 c0       	rjmp	.+44     	; 0xce0 <DIO_SetPinDir+0x19a>
        else if (port == Port_D)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	83 30       	cpi	r24, 0x03	; 3
     cb8:	99 f4       	brne	.+38     	; 0xce0 <DIO_SetPinDir+0x19a>
            SET_BIT(DDRD, pin);
     cba:	a1 e3       	ldi	r26, 0x31	; 49
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_SetPinDir+0x192>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_SetPinDir+0x18e>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
    }
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <DIO_SetPinValue>:

void DIO_SetPinValue(u8 port, u8 pin, u8 value)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <DIO_SetPinValue+0x6>
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	6a 83       	std	Y+2, r22	; 0x02
     cfc:	4b 83       	std	Y+3, r20	; 0x03
    if (value == Low)
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	88 23       	and	r24, r24
     d02:	09 f0       	breq	.+2      	; 0xd06 <DIO_SetPinValue+0x1a>
     d04:	61 c0       	rjmp	.+194    	; 0xdc8 <DIO_SetPinValue+0xdc>
    {
        if (port == Port_A)
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	88 23       	and	r24, r24
     d0a:	a9 f4       	brne	.+42     	; 0xd36 <DIO_SetPinValue+0x4a>
            CLR_BIT(PORTA, pin);
     d0c:	ab e3       	ldi	r26, 0x3B	; 59
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	eb e3       	ldi	r30, 0x3B	; 59
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_SetPinValue+0x3e>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_SetPinValue+0x3a>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	a8 c0       	rjmp	.+336    	; 0xe86 <DIO_SetPinValue+0x19a>
        else if (port == Port_B)
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	a9 f4       	brne	.+42     	; 0xd66 <DIO_SetPinValue+0x7a>
            CLR_BIT(PORTB, pin);
     d3c:	a8 e3       	ldi	r26, 0x38	; 56
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e8 e3       	ldi	r30, 0x38	; 56
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_SetPinValue+0x6e>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_SetPinValue+0x6a>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	90 c0       	rjmp	.+288    	; 0xe86 <DIO_SetPinValue+0x19a>
        else if (port == Port_C)
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	a9 f4       	brne	.+42     	; 0xd96 <DIO_SetPinValue+0xaa>
            CLR_BIT(PORTC, pin);
     d6c:	a5 e3       	ldi	r26, 0x35	; 53
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e3       	ldi	r30, 0x35	; 53
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_SetPinValue+0x9e>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_SetPinValue+0x9a>
     d8e:	80 95       	com	r24
     d90:	84 23       	and	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	78 c0       	rjmp	.+240    	; 0xe86 <DIO_SetPinValue+0x19a>
        else if (port == Port_D)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	09 f0       	breq	.+2      	; 0xd9e <DIO_SetPinValue+0xb2>
     d9c:	74 c0       	rjmp	.+232    	; 0xe86 <DIO_SetPinValue+0x19a>
            CLR_BIT(PORTD, pin);
     d9e:	a2 e3       	ldi	r26, 0x32	; 50
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e2 e3       	ldi	r30, 0x32	; 50
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_SetPinValue+0xd0>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_SetPinValue+0xcc>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	5f c0       	rjmp	.+190    	; 0xe86 <DIO_SetPinValue+0x19a>
    }

    else if (value == High)
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <DIO_SetPinValue+0xe4>
     dce:	5b c0       	rjmp	.+182    	; 0xe86 <DIO_SetPinValue+0x19a>
    {
        if (port == Port_A)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	88 23       	and	r24, r24
     dd4:	a1 f4       	brne	.+40     	; 0xdfe <DIO_SetPinValue+0x112>
            SET_BIT(PORTA, pin);
     dd6:	ab e3       	ldi	r26, 0x3B	; 59
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	eb e3       	ldi	r30, 0x3B	; 59
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_SetPinValue+0x108>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_SetPinValue+0x104>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	44 c0       	rjmp	.+136    	; 0xe86 <DIO_SetPinValue+0x19a>
        else if (port == Port_B)
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	a1 f4       	brne	.+40     	; 0xe2c <DIO_SetPinValue+0x140>
            SET_BIT(PORTB, pin);
     e04:	a8 e3       	ldi	r26, 0x38	; 56
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e8 e3       	ldi	r30, 0x38	; 56
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_SetPinValue+0x136>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_SetPinValue+0x132>
     e26:	84 2b       	or	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	2d c0       	rjmp	.+90     	; 0xe86 <DIO_SetPinValue+0x19a>
        else if (port == Port_C)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	a1 f4       	brne	.+40     	; 0xe5a <DIO_SetPinValue+0x16e>
            SET_BIT(PORTC, pin);
     e32:	a5 e3       	ldi	r26, 0x35	; 53
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e5 e3       	ldi	r30, 0x35	; 53
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_SetPinValue+0x164>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_SetPinValue+0x160>
     e54:	84 2b       	or	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	16 c0       	rjmp	.+44     	; 0xe86 <DIO_SetPinValue+0x19a>
        else if (port == Port_D)
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	99 f4       	brne	.+38     	; 0xe86 <DIO_SetPinValue+0x19a>
            SET_BIT(PORTD, pin);
     e60:	a2 e3       	ldi	r26, 0x32	; 50
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e2 e3       	ldi	r30, 0x32	; 50
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <DIO_SetPinValue+0x192>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <DIO_SetPinValue+0x18e>
     e82:	84 2b       	or	r24, r20
     e84:	8c 93       	st	X, r24
    }
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <DIO_GetPinValue>:

void DIO_GetPinValue(u8 port, u8 pin, u8 *value)
{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <DIO_GetPinValue+0x6>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <DIO_GetPinValue+0x8>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <DIO_GetPinValue+0xa>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	6a 83       	std	Y+2, r22	; 0x02
     ea4:	5c 83       	std	Y+4, r21	; 0x04
     ea6:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	3e 83       	std	Y+6, r19	; 0x06
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	4d 81       	ldd	r20, Y+5	; 0x05
     eb4:	5e 81       	ldd	r21, Y+6	; 0x06
     eb6:	41 30       	cpi	r20, 0x01	; 1
     eb8:	51 05       	cpc	r21, r1
     eba:	59 f1       	breq	.+86     	; 0xf12 <DIO_GetPinValue+0x80>
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	91 05       	cpc	r25, r1
     ec4:	34 f4       	brge	.+12     	; 0xed2 <DIO_GetPinValue+0x40>
     ec6:	2d 81       	ldd	r18, Y+5	; 0x05
     ec8:	3e 81       	ldd	r19, Y+6	; 0x06
     eca:	21 15       	cp	r18, r1
     ecc:	31 05       	cpc	r19, r1
     ece:	69 f0       	breq	.+26     	; 0xeea <DIO_GetPinValue+0x58>
     ed0:	5b c0       	rjmp	.+182    	; 0xf88 <DIO_GetPinValue+0xf6>
     ed2:	4d 81       	ldd	r20, Y+5	; 0x05
     ed4:	5e 81       	ldd	r21, Y+6	; 0x06
     ed6:	42 30       	cpi	r20, 0x02	; 2
     ed8:	51 05       	cpc	r21, r1
     eda:	79 f1       	breq	.+94     	; 0xf3a <DIO_GetPinValue+0xa8>
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f4       	brne	.+2      	; 0xee8 <DIO_GetPinValue+0x56>
     ee6:	3d c0       	rjmp	.+122    	; 0xf62 <DIO_GetPinValue+0xd0>
     ee8:	4f c0       	rjmp	.+158    	; 0xf88 <DIO_GetPinValue+0xf6>
	    {
	    case Port_A:
	        *value = GET_BIT(PINA, pin);
     eea:	e9 e3       	ldi	r30, 0x39	; 57
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a9 01       	movw	r20, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_GetPinValue+0x70>
     efe:	55 95       	asr	r21
     f00:	47 95       	ror	r20
     f02:	8a 95       	dec	r24
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_GetPinValue+0x6c>
     f06:	ca 01       	movw	r24, r20
     f08:	81 70       	andi	r24, 0x01	; 1
     f0a:	eb 81       	ldd	r30, Y+3	; 0x03
     f0c:	fc 81       	ldd	r31, Y+4	; 0x04
     f0e:	80 83       	st	Z, r24
     f10:	3b c0       	rjmp	.+118    	; 0xf88 <DIO_GetPinValue+0xf6>
	        break;

	    case Port_B:
	        *value = GET_BIT(PINB, pin);
     f12:	e6 e3       	ldi	r30, 0x36	; 54
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a9 01       	movw	r20, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_GetPinValue+0x98>
     f26:	55 95       	asr	r21
     f28:	47 95       	ror	r20
     f2a:	8a 95       	dec	r24
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_GetPinValue+0x94>
     f2e:	ca 01       	movw	r24, r20
     f30:	81 70       	andi	r24, 0x01	; 1
     f32:	eb 81       	ldd	r30, Y+3	; 0x03
     f34:	fc 81       	ldd	r31, Y+4	; 0x04
     f36:	80 83       	st	Z, r24
     f38:	27 c0       	rjmp	.+78     	; 0xf88 <DIO_GetPinValue+0xf6>
	        break;

	    case Port_C:
	        *value = GET_BIT(PINC, pin);
     f3a:	e3 e3       	ldi	r30, 0x33	; 51
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	a9 01       	movw	r20, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_GetPinValue+0xc0>
     f4e:	55 95       	asr	r21
     f50:	47 95       	ror	r20
     f52:	8a 95       	dec	r24
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_GetPinValue+0xbc>
     f56:	ca 01       	movw	r24, r20
     f58:	81 70       	andi	r24, 0x01	; 1
     f5a:	eb 81       	ldd	r30, Y+3	; 0x03
     f5c:	fc 81       	ldd	r31, Y+4	; 0x04
     f5e:	80 83       	st	Z, r24
     f60:	13 c0       	rjmp	.+38     	; 0xf88 <DIO_GetPinValue+0xf6>
	        break;

	    case Port_D:
	        *value = GET_BIT(PIND, pin);
     f62:	e0 e3       	ldi	r30, 0x30	; 48
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a9 01       	movw	r20, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_GetPinValue+0xe8>
     f76:	55 95       	asr	r21
     f78:	47 95       	ror	r20
     f7a:	8a 95       	dec	r24
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_GetPinValue+0xe4>
     f7e:	ca 01       	movw	r24, r20
     f80:	81 70       	andi	r24, 0x01	; 1
     f82:	eb 81       	ldd	r30, Y+3	; 0x03
     f84:	fc 81       	ldd	r31, Y+4	; 0x04
     f86:	80 83       	st	Z, r24
	        break;
	    }

}
     f88:	26 96       	adiw	r28, 0x06	; 6
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <DIO_SetPortDir>:

void DIO_SetPortDir(u8 port, u8 dir)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <DIO_SetPortDir+0x6>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	6a 83       	std	Y+2, r22	; 0x02
    if (dir == Input)
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	88 23       	and	r24, r24
     fac:	d9 f4       	brne	.+54     	; 0xfe4 <DIO_SetPortDir+0x4a>
    {
        if(port == Port_A)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	88 23       	and	r24, r24
     fb2:	21 f4       	brne	.+8      	; 0xfbc <DIO_SetPortDir+0x22>
            DDRA = 0x00;
     fb4:	ea e3       	ldi	r30, 0x3A	; 58
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	10 82       	st	Z, r1
     fba:	14 c0       	rjmp	.+40     	; 0xfe4 <DIO_SetPortDir+0x4a>
        else if (port == Port_B)
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	21 f4       	brne	.+8      	; 0xfca <DIO_SetPortDir+0x30>
            DDRB = 0x00;
     fc2:	e7 e3       	ldi	r30, 0x37	; 55
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <DIO_SetPortDir+0x4a>
        else if (port == Port_C)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	21 f4       	brne	.+8      	; 0xfd8 <DIO_SetPortDir+0x3e>
            DDRC = 0x00;
     fd0:	e4 e3       	ldi	r30, 0x34	; 52
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	10 82       	st	Z, r1
     fd6:	06 c0       	rjmp	.+12     	; 0xfe4 <DIO_SetPortDir+0x4a>
        else if (port == Port_D)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <DIO_SetPortDir+0x4a>
            DDRD = 0x00;
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	10 82       	st	Z, r1
    }

    if (dir == Output)
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	f9 f4       	brne	.+62     	; 0x1028 <DIO_SetPortDir+0x8e>
    {
        if (port == Port_A)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	88 23       	and	r24, r24
     fee:	29 f4       	brne	.+10     	; 0xffa <DIO_SetPortDir+0x60>
            DDRA = 0xff;
     ff0:	ea e3       	ldi	r30, 0x3A	; 58
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	80 83       	st	Z, r24
     ff8:	17 c0       	rjmp	.+46     	; 0x1028 <DIO_SetPortDir+0x8e>
        else if (port == Port_B)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	29 f4       	brne	.+10     	; 0x100a <DIO_SetPortDir+0x70>
            DDRB = 0xff;
    1000:	e7 e3       	ldi	r30, 0x37	; 55
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	80 83       	st	Z, r24
    1008:	0f c0       	rjmp	.+30     	; 0x1028 <DIO_SetPortDir+0x8e>
        else if (port == Port_C)
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	29 f4       	brne	.+10     	; 0x101a <DIO_SetPortDir+0x80>
            DDRC = 0xff;
    1010:	e4 e3       	ldi	r30, 0x34	; 52
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	80 83       	st	Z, r24
    1018:	07 c0       	rjmp	.+14     	; 0x1028 <DIO_SetPortDir+0x8e>
        else if (port == Port_D)
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	21 f4       	brne	.+8      	; 0x1028 <DIO_SetPortDir+0x8e>
            DDRD = 0xff;
    1020:	e1 e3       	ldi	r30, 0x31	; 49
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	80 83       	st	Z, r24
    }
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <DIO_SetPortValue>:

void DIO_SetPortValue(u8 port, u8 value)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <DIO_SetPortValue+0x6>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
    if (port == Port_A)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	88 23       	and	r24, r24
    1044:	29 f4       	brne	.+10     	; 0x1050 <DIO_SetPortValue+0x1e>
        PORTA = value;
    1046:	eb e3       	ldi	r30, 0x3B	; 59
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	80 83       	st	Z, r24
    104e:	17 c0       	rjmp	.+46     	; 0x107e <DIO_SetPortValue+0x4c>
    else if (port == Port_B)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	29 f4       	brne	.+10     	; 0x1060 <DIO_SetPortValue+0x2e>
        PORTB = value;
    1056:	e8 e3       	ldi	r30, 0x38	; 56
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	80 83       	st	Z, r24
    105e:	0f c0       	rjmp	.+30     	; 0x107e <DIO_SetPortValue+0x4c>
    else if (port == Port_C)
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	29 f4       	brne	.+10     	; 0x1070 <DIO_SetPortValue+0x3e>
        PORTC = value;
    1066:	e5 e3       	ldi	r30, 0x35	; 53
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	80 83       	st	Z, r24
    106e:	07 c0       	rjmp	.+14     	; 0x107e <DIO_SetPortValue+0x4c>
    else if (port == Port_D)
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	21 f4       	brne	.+8      	; 0x107e <DIO_SetPortValue+0x4c>
        PORTD = value;
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	80 83       	st	Z, r24
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <DIO_GetPortValue>:

void DIO_GetPortValue(u8 port, u8 *value)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <DIO_GetPortValue+0x6>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	7b 83       	std	Y+3, r23	; 0x03
    1098:	6a 83       	std	Y+2, r22	; 0x02
    if (port == Port_A)
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 23       	and	r24, r24
    109e:	39 f4       	brne	.+14     	; 0x10ae <DIO_GetPortValue+0x26>
        *value = PINA;
    10a0:	e9 e3       	ldi	r30, 0x39	; 57
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	ea 81       	ldd	r30, Y+2	; 0x02
    10a8:	fb 81       	ldd	r31, Y+3	; 0x03
    10aa:	80 83       	st	Z, r24
    10ac:	1d c0       	rjmp	.+58     	; 0x10e8 <DIO_GetPortValue+0x60>
    else if (port == Port_B)
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	39 f4       	brne	.+14     	; 0x10c2 <DIO_GetPortValue+0x3a>
        *value = PINB;
    10b4:	e6 e3       	ldi	r30, 0x36	; 54
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	ea 81       	ldd	r30, Y+2	; 0x02
    10bc:	fb 81       	ldd	r31, Y+3	; 0x03
    10be:	80 83       	st	Z, r24
    10c0:	13 c0       	rjmp	.+38     	; 0x10e8 <DIO_GetPortValue+0x60>
    else if (port == Port_C)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	39 f4       	brne	.+14     	; 0x10d6 <DIO_GetPortValue+0x4e>
        *value = PINC;
    10c8:	e3 e3       	ldi	r30, 0x33	; 51
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	ea 81       	ldd	r30, Y+2	; 0x02
    10d0:	fb 81       	ldd	r31, Y+3	; 0x03
    10d2:	80 83       	st	Z, r24
    10d4:	09 c0       	rjmp	.+18     	; 0x10e8 <DIO_GetPortValue+0x60>
    else if (port == Port_D)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	31 f4       	brne	.+12     	; 0x10e8 <DIO_GetPortValue+0x60>
        *value = PIND;
    10dc:	e0 e3       	ldi	r30, 0x30	; 48
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	ea 81       	ldd	r30, Y+2	; 0x02
    10e4:	fb 81       	ldd	r31, Y+3	; 0x03
    10e6:	80 83       	st	Z, r24
}
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <operation>:

u8 flag = 0;
u8 count2 = -1, count1 = 0, operator = 0, input;
u16 result = -1, first = 0, second = 0;

u16 operation(u16 first, u16 second, u8 operand) {
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	67 97       	sbiw	r28, 0x17	; 23
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	9a 8b       	std	Y+18, r25	; 0x12
    110a:	89 8b       	std	Y+17, r24	; 0x11
    110c:	7c 8b       	std	Y+20, r23	; 0x14
    110e:	6b 8b       	std	Y+19, r22	; 0x13
    1110:	4d 8b       	std	Y+21, r20	; 0x15
	u16 result = 0;
    1112:	18 8a       	std	Y+16, r1	; 0x10
    1114:	1f 86       	std	Y+15, r1	; 0x0f
	switch (operand) {
    1116:	8d 89       	ldd	r24, Y+21	; 0x15
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3f 8b       	std	Y+23, r19	; 0x17
    111e:	2e 8b       	std	Y+22, r18	; 0x16
    1120:	4e 89       	ldd	r20, Y+22	; 0x16
    1122:	5f 89       	ldd	r21, Y+23	; 0x17
    1124:	4d 32       	cpi	r20, 0x2D	; 45
    1126:	51 05       	cpc	r21, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <operation+0x38>
    112a:	a7 c0       	rjmp	.+334    	; 0x127a <operation+0x186>
    112c:	8e 89       	ldd	r24, Y+22	; 0x16
    112e:	9f 89       	ldd	r25, Y+23	; 0x17
    1130:	8e 32       	cpi	r24, 0x2E	; 46
    1132:	91 05       	cpc	r25, r1
    1134:	6c f4       	brge	.+26     	; 0x1150 <operation+0x5c>
    1136:	2e 89       	ldd	r18, Y+22	; 0x16
    1138:	3f 89       	ldd	r19, Y+23	; 0x17
    113a:	2a 32       	cpi	r18, 0x2A	; 42
    113c:	31 05       	cpc	r19, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <operation+0x4e>
    1140:	a5 c0       	rjmp	.+330    	; 0x128c <operation+0x198>
    1142:	4e 89       	ldd	r20, Y+22	; 0x16
    1144:	5f 89       	ldd	r21, Y+23	; 0x17
    1146:	4b 32       	cpi	r20, 0x2B	; 43
    1148:	51 05       	cpc	r21, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <operation+0x5a>
    114c:	8d c0       	rjmp	.+282    	; 0x1268 <operation+0x174>
    114e:	be c0       	rjmp	.+380    	; 0x12cc <operation+0x1d8>
    1150:	8e 89       	ldd	r24, Y+22	; 0x16
    1152:	9f 89       	ldd	r25, Y+23	; 0x17
    1154:	8f 32       	cpi	r24, 0x2F	; 47
    1156:	91 05       	cpc	r25, r1
    1158:	09 f4       	brne	.+2      	; 0x115c <operation+0x68>
    115a:	a7 c0       	rjmp	.+334    	; 0x12aa <operation+0x1b6>
    115c:	2e 89       	ldd	r18, Y+22	; 0x16
    115e:	3f 89       	ldd	r19, Y+23	; 0x17
    1160:	23 34       	cpi	r18, 0x43	; 67
    1162:	31 05       	cpc	r19, r1
    1164:	09 f0       	breq	.+2      	; 0x1168 <operation+0x74>
    1166:	b2 c0       	rjmp	.+356    	; 0x12cc <operation+0x1d8>

	case 'C':
			first = 0;
    1168:	1a 8a       	std	Y+18, r1	; 0x12
    116a:	19 8a       	std	Y+17, r1	; 0x11
			second = 0;
    116c:	1c 8a       	std	Y+20, r1	; 0x14
    116e:	1b 8a       	std	Y+19, r1	; 0x13
			count1 = 0;
    1170:	10 92 7b 00 	sts	0x007B, r1
			count2 = 0;
    1174:	10 92 76 00 	sts	0x0076, r1
			flag = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 7a 00 	sts	0x007A, r24
			LCD_clearScreen();
    117e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a0 e2       	ldi	r26, 0x20	; 32
    1188:	b2 e4       	ldi	r27, 0x42	; 66
    118a:	8b 87       	std	Y+11, r24	; 0x0b
    118c:	9c 87       	std	Y+12, r25	; 0x0c
    118e:	ad 87       	std	Y+13, r26	; 0x0d
    1190:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1192:	6b 85       	ldd	r22, Y+11	; 0x0b
    1194:	7c 85       	ldd	r23, Y+12	; 0x0c
    1196:	8d 85       	ldd	r24, Y+13	; 0x0d
    1198:	9e 85       	ldd	r25, Y+14	; 0x0e
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	4a ef       	ldi	r20, 0xFA	; 250
    11a0:	54 e4       	ldi	r21, 0x44	; 68
    11a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	8f 83       	std	Y+7, r24	; 0x07
    11ac:	98 87       	std	Y+8, r25	; 0x08
    11ae:	a9 87       	std	Y+9, r26	; 0x09
    11b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b2:	6f 81       	ldd	r22, Y+7	; 0x07
    11b4:	78 85       	ldd	r23, Y+8	; 0x08
    11b6:	89 85       	ldd	r24, Y+9	; 0x09
    11b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e8       	ldi	r20, 0x80	; 128
    11c0:	5f e3       	ldi	r21, 0x3F	; 63
    11c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c6:	88 23       	and	r24, r24
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <operation+0xe0>
		__ticks = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	3f c0       	rjmp	.+126    	; 0x1252 <operation+0x15e>
	else if (__tmp > 65535)
    11d4:	6f 81       	ldd	r22, Y+7	; 0x07
    11d6:	78 85       	ldd	r23, Y+8	; 0x08
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	3f ef       	ldi	r19, 0xFF	; 255
    11e0:	4f e7       	ldi	r20, 0x7F	; 127
    11e2:	57 e4       	ldi	r21, 0x47	; 71
    11e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e8:	18 16       	cp	r1, r24
    11ea:	4c f5       	brge	.+82     	; 0x123e <operation+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e2       	ldi	r20, 0x20	; 32
    11fa:	51 e4       	ldi	r21, 0x41	; 65
    11fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9e 83       	std	Y+6, r25	; 0x06
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	0f c0       	rjmp	.+30     	; 0x1234 <operation+0x140>
    1216:	88 ec       	ldi	r24, 0xC8	; 200
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <operation+0x12e>
    1226:	9c 83       	std	Y+4, r25	; 0x04
    1228:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	9e 83       	std	Y+6, r25	; 0x06
    1232:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	69 f7       	brne	.-38     	; 0x1216 <operation+0x122>
    123c:	47 c0       	rjmp	.+142    	; 0x12cc <operation+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123e:	6f 81       	ldd	r22, Y+7	; 0x07
    1240:	78 85       	ldd	r23, Y+8	; 0x08
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <operation+0x16a>
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	32 c0       	rjmp	.+100    	; 0x12cc <operation+0x1d8>
			_delay_ms(40);
			break;

	case '+':
		result = first + second;
    1268:	89 89       	ldd	r24, Y+17	; 0x11
    126a:	9a 89       	ldd	r25, Y+18	; 0x12
    126c:	2b 89       	ldd	r18, Y+19	; 0x13
    126e:	3c 89       	ldd	r19, Y+20	; 0x14
    1270:	82 0f       	add	r24, r18
    1272:	93 1f       	adc	r25, r19
    1274:	98 8b       	std	Y+16, r25	; 0x10
    1276:	8f 87       	std	Y+15, r24	; 0x0f
    1278:	29 c0       	rjmp	.+82     	; 0x12cc <operation+0x1d8>
		break;
	case '-':
		result = first - second;
    127a:	89 89       	ldd	r24, Y+17	; 0x11
    127c:	9a 89       	ldd	r25, Y+18	; 0x12
    127e:	2b 89       	ldd	r18, Y+19	; 0x13
    1280:	3c 89       	ldd	r19, Y+20	; 0x14
    1282:	82 1b       	sub	r24, r18
    1284:	93 0b       	sbc	r25, r19
    1286:	98 8b       	std	Y+16, r25	; 0x10
    1288:	8f 87       	std	Y+15, r24	; 0x0f
    128a:	20 c0       	rjmp	.+64     	; 0x12cc <operation+0x1d8>
		break;
	case '*':
		result = first * second;
    128c:	89 89       	ldd	r24, Y+17	; 0x11
    128e:	9a 89       	ldd	r25, Y+18	; 0x12
    1290:	2b 89       	ldd	r18, Y+19	; 0x13
    1292:	3c 89       	ldd	r19, Y+20	; 0x14
    1294:	ac 01       	movw	r20, r24
    1296:	42 9f       	mul	r20, r18
    1298:	c0 01       	movw	r24, r0
    129a:	43 9f       	mul	r20, r19
    129c:	90 0d       	add	r25, r0
    129e:	52 9f       	mul	r21, r18
    12a0:	90 0d       	add	r25, r0
    12a2:	11 24       	eor	r1, r1
    12a4:	98 8b       	std	Y+16, r25	; 0x10
    12a6:	8f 87       	std	Y+15, r24	; 0x0f
    12a8:	11 c0       	rjmp	.+34     	; 0x12cc <operation+0x1d8>
		break;
	case '/':
		if (second != 0) {
    12aa:	8b 89       	ldd	r24, Y+19	; 0x13
    12ac:	9c 89       	ldd	r25, Y+20	; 0x14
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	59 f0       	breq	.+22     	; 0x12c8 <operation+0x1d4>
			result = first / second;
    12b2:	89 89       	ldd	r24, Y+17	; 0x11
    12b4:	9a 89       	ldd	r25, Y+18	; 0x12
    12b6:	2b 89       	ldd	r18, Y+19	; 0x13
    12b8:	3c 89       	ldd	r19, Y+20	; 0x14
    12ba:	b9 01       	movw	r22, r18
    12bc:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__udivmodhi4>
    12c0:	cb 01       	movw	r24, r22
    12c2:	98 8b       	std	Y+16, r25	; 0x10
    12c4:	8f 87       	std	Y+15, r24	; 0x0f
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <operation+0x1d8>
		} else {
			result = 0;
    12c8:	18 8a       	std	Y+16, r1	; 0x10
    12ca:	1f 86       	std	Y+15, r1	; 0x0f
		}
		break;
	}
	return result;
    12cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ce:	98 89       	ldd	r25, Y+16	; 0x10
}
    12d0:	67 96       	adiw	r28, 0x17	; 23
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <Interrupt_init>:

void Interrupt_init(void) {
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDir(Port_D, Pin3, Input);
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	63 e0       	ldi	r22, 0x03	; 3
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
	DIO_SetPinValue(Port_D, Pin3, High);
    12f4:	83 e0       	ldi	r24, 0x03	; 3
    12f6:	63 e0       	ldi	r22, 0x03	; 3
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>
	GICR |= (1 << 7);
    12fe:	ab e5       	ldi	r26, 0x5B	; 91
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	eb e5       	ldi	r30, 0x5B	; 91
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	80 68       	ori	r24, 0x80	; 128
    130a:	8c 93       	st	X, r24
	MCUCR |= (1 << 3);
    130c:	a5 e5       	ldi	r26, 0x55	; 85
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e5 e5       	ldi	r30, 0x55	; 85
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	88 60       	ori	r24, 0x08	; 8
    1318:	8c 93       	st	X, r24
	MCUCR &= ~(1 << 2);
    131a:	a5 e5       	ldi	r26, 0x55	; 85
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e5 e5       	ldi	r30, 0x55	; 85
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8b 7f       	andi	r24, 0xFB	; 251
    1326:	8c 93       	st	X, r24
	sei();
    1328:	78 94       	sei
}
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <__vector_2>:

//interrupt to delete a character
ISR(INT1_vect) {
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	aa 97       	sbiw	r28, 0x2a	; 42
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	cd bf       	out	0x3d, r28	; 61
	//delete a char from the first number
	if (operator == 0) {
    1360:	80 91 7c 00 	lds	r24, 0x007C
    1364:	88 23       	and	r24, r24
    1366:	09 f0       	breq	.+2      	; 0x136a <__vector_2+0x3a>
    1368:	94 c0       	rjmp	.+296    	; 0x1492 <__vector_2+0x162>
		first /= 10;
    136a:	80 91 7d 00 	lds	r24, 0x007D
    136e:	90 91 7e 00 	lds	r25, 0x007E
    1372:	2a e0       	ldi	r18, 0x0A	; 10
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	b9 01       	movw	r22, r18
    1378:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__udivmodhi4>
    137c:	cb 01       	movw	r24, r22
    137e:	90 93 7e 00 	sts	0x007E, r25
    1382:	80 93 7d 00 	sts	0x007D, r24
		count1--;
    1386:	80 91 7b 00 	lds	r24, 0x007B
    138a:	81 50       	subi	r24, 0x01	; 1
    138c:	80 93 7b 00 	sts	0x007B, r24
		LCD_moveCursor(0, count1);
    1390:	90 91 7b 00 	lds	r25, 0x007B
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	69 2f       	mov	r22, r25
    1398:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
		LCD_displayCharacter(' ');
    139c:	80 e2       	ldi	r24, 0x20	; 32
    139e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <LCD_displayCharacter>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a0 e2       	ldi	r26, 0x20	; 32
    13a8:	b2 e4       	ldi	r27, 0x42	; 66
    13aa:	8f a3       	std	Y+39, r24	; 0x27
    13ac:	98 a7       	std	Y+40, r25	; 0x28
    13ae:	a9 a7       	std	Y+41, r26	; 0x29
    13b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b2:	6f a1       	ldd	r22, Y+39	; 0x27
    13b4:	78 a5       	ldd	r23, Y+40	; 0x28
    13b6:	89 a5       	ldd	r24, Y+41	; 0x29
    13b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	4a ef       	ldi	r20, 0xFA	; 250
    13c0:	54 e4       	ldi	r21, 0x44	; 68
    13c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	8b a3       	std	Y+35, r24	; 0x23
    13cc:	9c a3       	std	Y+36, r25	; 0x24
    13ce:	ad a3       	std	Y+37, r26	; 0x25
    13d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13d2:	6b a1       	ldd	r22, Y+35	; 0x23
    13d4:	7c a1       	ldd	r23, Y+36	; 0x24
    13d6:	8d a1       	ldd	r24, Y+37	; 0x25
    13d8:	9e a1       	ldd	r25, Y+38	; 0x26
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e8       	ldi	r20, 0x80	; 128
    13e0:	5f e3       	ldi	r21, 0x3F	; 63
    13e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e6:	88 23       	and	r24, r24
    13e8:	2c f4       	brge	.+10     	; 0x13f4 <__vector_2+0xc4>
		__ticks = 1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9a a3       	std	Y+34, r25	; 0x22
    13f0:	89 a3       	std	Y+33, r24	; 0x21
    13f2:	3f c0       	rjmp	.+126    	; 0x1472 <__vector_2+0x142>
	else if (__tmp > 65535)
    13f4:	6b a1       	ldd	r22, Y+35	; 0x23
    13f6:	7c a1       	ldd	r23, Y+36	; 0x24
    13f8:	8d a1       	ldd	r24, Y+37	; 0x25
    13fa:	9e a1       	ldd	r25, Y+38	; 0x26
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	3f ef       	ldi	r19, 0xFF	; 255
    1400:	4f e7       	ldi	r20, 0x7F	; 127
    1402:	57 e4       	ldi	r21, 0x47	; 71
    1404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1408:	18 16       	cp	r1, r24
    140a:	4c f5       	brge	.+82     	; 0x145e <__vector_2+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140c:	6f a1       	ldd	r22, Y+39	; 0x27
    140e:	78 a5       	ldd	r23, Y+40	; 0x28
    1410:	89 a5       	ldd	r24, Y+41	; 0x29
    1412:	9a a5       	ldd	r25, Y+42	; 0x2a
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e2       	ldi	r20, 0x20	; 32
    141a:	51 e4       	ldi	r21, 0x41	; 65
    141c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	9a a3       	std	Y+34, r25	; 0x22
    1432:	89 a3       	std	Y+33, r24	; 0x21
    1434:	0f c0       	rjmp	.+30     	; 0x1454 <__vector_2+0x124>
    1436:	88 ec       	ldi	r24, 0xC8	; 200
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	98 a3       	std	Y+32, r25	; 0x20
    143c:	8f 8f       	std	Y+31, r24	; 0x1f
    143e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1440:	98 a1       	ldd	r25, Y+32	; 0x20
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <__vector_2+0x112>
    1446:	98 a3       	std	Y+32, r25	; 0x20
    1448:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144a:	89 a1       	ldd	r24, Y+33	; 0x21
    144c:	9a a1       	ldd	r25, Y+34	; 0x22
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	9a a3       	std	Y+34, r25	; 0x22
    1452:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1454:	89 a1       	ldd	r24, Y+33	; 0x21
    1456:	9a a1       	ldd	r25, Y+34	; 0x22
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	69 f7       	brne	.-38     	; 0x1436 <__vector_2+0x106>
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <__vector_2+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145e:	6b a1       	ldd	r22, Y+35	; 0x23
    1460:	7c a1       	ldd	r23, Y+36	; 0x24
    1462:	8d a1       	ldd	r24, Y+37	; 0x25
    1464:	9e a1       	ldd	r25, Y+38	; 0x26
    1466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	9a a3       	std	Y+34, r25	; 0x22
    1470:	89 a3       	std	Y+33, r24	; 0x21
    1472:	89 a1       	ldd	r24, Y+33	; 0x21
    1474:	9a a1       	ldd	r25, Y+34	; 0x22
    1476:	9e 8f       	std	Y+30, r25	; 0x1e
    1478:	8d 8f       	std	Y+29, r24	; 0x1d
    147a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    147c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <__vector_2+0x14e>
    1482:	9e 8f       	std	Y+30, r25	; 0x1e
    1484:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(40);
		LCD_moveCursor(0, count1);
    1486:	90 91 7b 00 	lds	r25, 0x007B
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	69 2f       	mov	r22, r25
    148e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
	}

	//delete a char from the second number
	if (count2 > 0) {
    1492:	80 91 76 00 	lds	r24, 0x0076
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <__vector_2+0x16c>
    149a:	94 c0       	rjmp	.+296    	; 0x15c4 <__vector_2+0x294>
		second /= 10;
    149c:	80 91 7f 00 	lds	r24, 0x007F
    14a0:	90 91 80 00 	lds	r25, 0x0080
    14a4:	2a e0       	ldi	r18, 0x0A	; 10
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	b9 01       	movw	r22, r18
    14aa:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__udivmodhi4>
    14ae:	cb 01       	movw	r24, r22
    14b0:	90 93 80 00 	sts	0x0080, r25
    14b4:	80 93 7f 00 	sts	0x007F, r24
		count2--;
    14b8:	80 91 76 00 	lds	r24, 0x0076
    14bc:	81 50       	subi	r24, 0x01	; 1
    14be:	80 93 76 00 	sts	0x0076, r24
		LCD_moveCursor(1, count2);
    14c2:	90 91 76 00 	lds	r25, 0x0076
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	69 2f       	mov	r22, r25
    14ca:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
		LCD_displayCharacter(' ');
    14ce:	80 e2       	ldi	r24, 0x20	; 32
    14d0:	0e 94 50 13 	call	0x26a0	; 0x26a0 <LCD_displayCharacter>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a0 e2       	ldi	r26, 0x20	; 32
    14da:	b2 e4       	ldi	r27, 0x42	; 66
    14dc:	89 8f       	std	Y+25, r24	; 0x19
    14de:	9a 8f       	std	Y+26, r25	; 0x1a
    14e0:	ab 8f       	std	Y+27, r26	; 0x1b
    14e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	69 8d       	ldd	r22, Y+25	; 0x19
    14e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a ef       	ldi	r20, 0xFA	; 250
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8d 8b       	std	Y+21, r24	; 0x15
    14fe:	9e 8b       	std	Y+22, r25	; 0x16
    1500:	af 8b       	std	Y+23, r26	; 0x17
    1502:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1504:	6d 89       	ldd	r22, Y+21	; 0x15
    1506:	7e 89       	ldd	r23, Y+22	; 0x16
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <__vector_2+0x1f6>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9c 8b       	std	Y+20, r25	; 0x14
    1522:	8b 8b       	std	Y+19, r24	; 0x13
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <__vector_2+0x274>
	else if (__tmp > 65535)
    1526:	6d 89       	ldd	r22, Y+21	; 0x15
    1528:	7e 89       	ldd	r23, Y+22	; 0x16
    152a:	8f 89       	ldd	r24, Y+23	; 0x17
    152c:	98 8d       	ldd	r25, Y+24	; 0x18
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <__vector_2+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	69 8d       	ldd	r22, Y+25	; 0x19
    1540:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1542:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1544:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9c 8b       	std	Y+20, r25	; 0x14
    1564:	8b 8b       	std	Y+19, r24	; 0x13
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <__vector_2+0x256>
    1568:	88 ec       	ldi	r24, 0xC8	; 200
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9a 8b       	std	Y+18, r25	; 0x12
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	89 89       	ldd	r24, Y+17	; 0x11
    1572:	9a 89       	ldd	r25, Y+18	; 0x12
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <__vector_2+0x244>
    1578:	9a 8b       	std	Y+18, r25	; 0x12
    157a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	8b 89       	ldd	r24, Y+19	; 0x13
    157e:	9c 89       	ldd	r25, Y+20	; 0x14
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9c 8b       	std	Y+20, r25	; 0x14
    1584:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
    1588:	9c 89       	ldd	r25, Y+20	; 0x14
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <__vector_2+0x238>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <__vector_2+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6d 89       	ldd	r22, Y+21	; 0x15
    1592:	7e 89       	ldd	r23, Y+22	; 0x16
    1594:	8f 89       	ldd	r24, Y+23	; 0x17
    1596:	98 8d       	ldd	r25, Y+24	; 0x18
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9c 8b       	std	Y+20, r25	; 0x14
    15a2:	8b 8b       	std	Y+19, r24	; 0x13
    15a4:	8b 89       	ldd	r24, Y+19	; 0x13
    15a6:	9c 89       	ldd	r25, Y+20	; 0x14
    15a8:	98 8b       	std	Y+16, r25	; 0x10
    15aa:	8f 87       	std	Y+15, r24	; 0x0f
    15ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ae:	98 89       	ldd	r25, Y+16	; 0x10
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <__vector_2+0x280>
    15b4:	98 8b       	std	Y+16, r25	; 0x10
    15b6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(40);
		LCD_moveCursor(1, count2);
    15b8:	90 91 76 00 	lds	r25, 0x0076
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	69 2f       	mov	r22, r25
    15c0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
	}
	//delete the operand
	if (count2 == 0 && operator != 0) {
    15c4:	80 91 76 00 	lds	r24, 0x0076
    15c8:	88 23       	and	r24, r24
    15ca:	09 f0       	breq	.+2      	; 0x15ce <__vector_2+0x29e>
    15cc:	8a c0       	rjmp	.+276    	; 0x16e2 <__vector_2+0x3b2>
    15ce:	80 91 7c 00 	lds	r24, 0x007C
    15d2:	88 23       	and	r24, r24
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <__vector_2+0x2a8>
    15d6:	85 c0       	rjmp	.+266    	; 0x16e2 <__vector_2+0x3b2>
		LCD_moveCursor(1, 0);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
		LCD_displayCharacter(' ');
    15e0:	80 e2       	ldi	r24, 0x20	; 32
    15e2:	0e 94 50 13 	call	0x26a0	; 0x26a0 <LCD_displayCharacter>
		LCD_moveCursor(1, 0);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
		operator = KEYPAD_getPressedKey();
    15ee:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <KEYPAD_getPressedKey>
    15f2:	80 93 7c 00 	sts	0x007C, r24
		LCD_displayCharacter(operator);
    15f6:	80 91 7c 00 	lds	r24, 0x007C
    15fa:	0e 94 50 13 	call	0x26a0	; 0x26a0 <LCD_displayCharacter>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e2       	ldi	r26, 0x20	; 32
    1604:	b2 e4       	ldi	r27, 0x42	; 66
    1606:	8b 87       	std	Y+11, r24	; 0x0b
    1608:	9c 87       	std	Y+12, r25	; 0x0c
    160a:	ad 87       	std	Y+13, r26	; 0x0d
    160c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1610:	7c 85       	ldd	r23, Y+12	; 0x0c
    1612:	8d 85       	ldd	r24, Y+13	; 0x0d
    1614:	9e 85       	ldd	r25, Y+14	; 0x0e
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4a ef       	ldi	r20, 0xFA	; 250
    161c:	54 e4       	ldi	r21, 0x44	; 68
    161e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	8f 83       	std	Y+7, r24	; 0x07
    1628:	98 87       	std	Y+8, r25	; 0x08
    162a:	a9 87       	std	Y+9, r26	; 0x09
    162c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    162e:	6f 81       	ldd	r22, Y+7	; 0x07
    1630:	78 85       	ldd	r23, Y+8	; 0x08
    1632:	89 85       	ldd	r24, Y+9	; 0x09
    1634:	9a 85       	ldd	r25, Y+10	; 0x0a
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	5f e3       	ldi	r21, 0x3F	; 63
    163e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1642:	88 23       	and	r24, r24
    1644:	2c f4       	brge	.+10     	; 0x1650 <__vector_2+0x320>
		__ticks = 1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	3f c0       	rjmp	.+126    	; 0x16ce <__vector_2+0x39e>
	else if (__tmp > 65535)
    1650:	6f 81       	ldd	r22, Y+7	; 0x07
    1652:	78 85       	ldd	r23, Y+8	; 0x08
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	3f ef       	ldi	r19, 0xFF	; 255
    165c:	4f e7       	ldi	r20, 0x7F	; 127
    165e:	57 e4       	ldi	r21, 0x47	; 71
    1660:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1664:	18 16       	cp	r1, r24
    1666:	4c f5       	brge	.+82     	; 0x16ba <__vector_2+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1668:	6b 85       	ldd	r22, Y+11	; 0x0b
    166a:	7c 85       	ldd	r23, Y+12	; 0x0c
    166c:	8d 85       	ldd	r24, Y+13	; 0x0d
    166e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e2       	ldi	r20, 0x20	; 32
    1676:	51 e4       	ldi	r21, 0x41	; 65
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	0f c0       	rjmp	.+30     	; 0x16b0 <__vector_2+0x380>
    1692:	88 ec       	ldi	r24, 0xC8	; 200
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <__vector_2+0x36e>
    16a2:	9c 83       	std	Y+4, r25	; 0x04
    16a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	69 f7       	brne	.-38     	; 0x1692 <__vector_2+0x362>
    16b8:	14 c0       	rjmp	.+40     	; 0x16e2 <__vector_2+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <__vector_2+0x3aa>
    16de:	9a 83       	std	Y+2, r25	; 0x02
    16e0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(40);
	}
}
    16e2:	aa 96       	adiw	r28, 0x2a	; 42
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	bf 91       	pop	r27
    16f2:	af 91       	pop	r26
    16f4:	9f 91       	pop	r25
    16f6:	8f 91       	pop	r24
    16f8:	7f 91       	pop	r23
    16fa:	6f 91       	pop	r22
    16fc:	5f 91       	pop	r21
    16fe:	4f 91       	pop	r20
    1700:	3f 91       	pop	r19
    1702:	2f 91       	pop	r18
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	0f 90       	pop	r0
    170a:	1f 90       	pop	r1
    170c:	18 95       	reti

0000170e <main>:

int main(void) {
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	c4 55       	subi	r28, 0x54	; 84
    171c:	d0 40       	sbci	r29, 0x00	; 0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
	Interrupt_init();
    1728:	0e 94 71 09 	call	0x12e2	; 0x12e2 <Interrupt_init>
	LCD_init();
    172c:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_init>

	while (1) {
		//print the first number
		if (first == result) {
    1730:	20 91 7d 00 	lds	r18, 0x007D
    1734:	30 91 7e 00 	lds	r19, 0x007E
    1738:	80 91 77 00 	lds	r24, 0x0077
    173c:	90 91 78 00 	lds	r25, 0x0078
    1740:	28 17       	cp	r18, r24
    1742:	39 07       	cpc	r19, r25
    1744:	09 f0       	breq	.+2      	; 0x1748 <main+0x3a>
    1746:	bb c0       	rjmp	.+374    	; 0x18be <main+0x1b0>
			LCD_intgerToString(first);
    1748:	80 91 7d 00 	lds	r24, 0x007D
    174c:	90 91 7e 00 	lds	r25, 0x007E
    1750:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <LCD_intgerToString>
    1754:	fe 01       	movw	r30, r28
    1756:	ef 5a       	subi	r30, 0xAF	; 175
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a0 e2       	ldi	r26, 0x20	; 32
    1760:	b2 e4       	ldi	r27, 0x42	; 66
    1762:	80 83       	st	Z, r24
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	a2 83       	std	Z+2, r26	; 0x02
    1768:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176a:	8e 01       	movw	r16, r28
    176c:	03 5b       	subi	r16, 0xB3	; 179
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	fe 01       	movw	r30, r28
    1772:	ef 5a       	subi	r30, 0xAF	; 175
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	93 81       	ldd	r25, Z+3	; 0x03
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a ef       	ldi	r20, 0xFA	; 250
    1784:	54 e4       	ldi	r21, 0x44	; 68
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	f8 01       	movw	r30, r16
    1790:	80 83       	st	Z, r24
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	a2 83       	std	Z+2, r26	; 0x02
    1796:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1798:	fe 01       	movw	r30, r28
    179a:	e3 5b       	subi	r30, 0xB3	; 179
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	60 81       	ld	r22, Z
    17a0:	71 81       	ldd	r23, Z+1	; 0x01
    17a2:	82 81       	ldd	r24, Z+2	; 0x02
    17a4:	93 81       	ldd	r25, Z+3	; 0x03
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e8       	ldi	r20, 0x80	; 128
    17ac:	5f e3       	ldi	r21, 0x3F	; 63
    17ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b2:	88 23       	and	r24, r24
    17b4:	44 f4       	brge	.+16     	; 0x17c6 <main+0xb8>
		__ticks = 1;
    17b6:	fe 01       	movw	r30, r28
    17b8:	e5 5b       	subi	r30, 0xB5	; 181
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	64 c0       	rjmp	.+200    	; 0x188e <main+0x180>
	else if (__tmp > 65535)
    17c6:	fe 01       	movw	r30, r28
    17c8:	e3 5b       	subi	r30, 0xB3	; 179
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	57 e4       	ldi	r21, 0x47	; 71
    17dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <main+0xd8>
    17e4:	43 c0       	rjmp	.+134    	; 0x186c <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	fe 01       	movw	r30, r28
    17e8:	ef 5a       	subi	r30, 0xAF	; 175
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8e 01       	movw	r16, r28
    1806:	05 5b       	subi	r16, 0xB5	; 181
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	f8 01       	movw	r30, r16
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
    181c:	1f c0       	rjmp	.+62     	; 0x185c <main+0x14e>
    181e:	fe 01       	movw	r30, r28
    1820:	e7 5b       	subi	r30, 0xB7	; 183
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	88 ec       	ldi	r24, 0xC8	; 200
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	fe 01       	movw	r30, r28
    182e:	e7 5b       	subi	r30, 0xB7	; 183
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <main+0x128>
    183a:	fe 01       	movw	r30, r28
    183c:	e7 5b       	subi	r30, 0xB7	; 183
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	de 01       	movw	r26, r28
    1846:	a5 5b       	subi	r26, 0xB5	; 181
    1848:	bf 4f       	sbci	r27, 0xFF	; 255
    184a:	fe 01       	movw	r30, r28
    184c:	e5 5b       	subi	r30, 0xB5	; 181
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	11 96       	adiw	r26, 0x01	; 1
    1858:	9c 93       	st	X, r25
    185a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185c:	fe 01       	movw	r30, r28
    185e:	e5 5b       	subi	r30, 0xB5	; 181
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	d1 f6       	brne	.-76     	; 0x181e <main+0x110>
    186a:	0b c1       	rjmp	.+534    	; 0x1a82 <main+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186c:	8e 01       	movw	r16, r28
    186e:	05 5b       	subi	r16, 0xB5	; 181
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	fe 01       	movw	r30, r28
    1874:	e3 5b       	subi	r30, 0xB3	; 179
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	f8 01       	movw	r30, r16
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
    188e:	de 01       	movw	r26, r28
    1890:	a9 5b       	subi	r26, 0xB9	; 185
    1892:	bf 4f       	sbci	r27, 0xFF	; 255
    1894:	fe 01       	movw	r30, r28
    1896:	e5 5b       	subi	r30, 0xB5	; 181
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	11 96       	adiw	r26, 0x01	; 1
    18a0:	9c 93       	st	X, r25
    18a2:	8e 93       	st	-X, r24
    18a4:	fe 01       	movw	r30, r28
    18a6:	e9 5b       	subi	r30, 0xB9	; 185
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <main+0x1a0>
    18b2:	fe 01       	movw	r30, r28
    18b4:	e9 5b       	subi	r30, 0xB9	; 185
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
    18bc:	e2 c0       	rjmp	.+452    	; 0x1a82 <main+0x374>
			_delay_ms(40);
		} else {
			input = KEYPAD_getPressedKey();
    18be:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <KEYPAD_getPressedKey>
    18c2:	80 93 81 00 	sts	0x0081, r24
			count1 = 0, operator = 0;
    18c6:	10 92 7b 00 	sts	0x007B, r1
    18ca:	10 92 7c 00 	sts	0x007C, r1
			result = -1, first = 0, second = 0;
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	9f ef       	ldi	r25, 0xFF	; 255
    18d2:	90 93 78 00 	sts	0x0078, r25
    18d6:	80 93 77 00 	sts	0x0077, r24
    18da:	10 92 7e 00 	sts	0x007E, r1
    18de:	10 92 7d 00 	sts	0x007D, r1
    18e2:	10 92 80 00 	sts	0x0080, r1
    18e6:	10 92 7f 00 	sts	0x007F, r1
    18ea:	b2 c0       	rjmp	.+356    	; 0x1a50 <main+0x342>
			while ((input != '+') && (input != '-') && (input != '*')
					&& (input != '/') && (input != '=') && (input != 'C') ) {

				if (flag) {
    18ec:	80 91 7a 00 	lds	r24, 0x007A
    18f0:	88 23       	and	r24, r24
    18f2:	19 f0       	breq	.+6      	; 0x18fa <main+0x1ec>
					flag = 0;
    18f4:	10 92 7a 00 	sts	0x007A, r1
    18f8:	a7 c0       	rjmp	.+334    	; 0x1a48 <main+0x33a>
				} else {
					first = first * 10 + (input - '0');
    18fa:	80 91 7d 00 	lds	r24, 0x007D
    18fe:	90 91 7e 00 	lds	r25, 0x007E
    1902:	9c 01       	movw	r18, r24
    1904:	22 0f       	add	r18, r18
    1906:	33 1f       	adc	r19, r19
    1908:	c9 01       	movw	r24, r18
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	28 0f       	add	r18, r24
    1914:	39 1f       	adc	r19, r25
    1916:	80 91 81 00 	lds	r24, 0x0081
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	82 0f       	add	r24, r18
    1920:	93 1f       	adc	r25, r19
    1922:	c0 97       	sbiw	r24, 0x30	; 48
    1924:	90 93 7e 00 	sts	0x007E, r25
    1928:	80 93 7d 00 	sts	0x007D, r24
					LCD_displayCharacter(input);
    192c:	80 91 81 00 	lds	r24, 0x0081
    1930:	0e 94 50 13 	call	0x26a0	; 0x26a0 <LCD_displayCharacter>
    1934:	fe 01       	movw	r30, r28
    1936:	ed 5b       	subi	r30, 0xBD	; 189
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a0 e2       	ldi	r26, 0x20	; 32
    1940:	b2 e4       	ldi	r27, 0x42	; 66
    1942:	80 83       	st	Z, r24
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	a2 83       	std	Z+2, r26	; 0x02
    1948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	8e 01       	movw	r16, r28
    194c:	01 5c       	subi	r16, 0xC1	; 193
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	fe 01       	movw	r30, r28
    1952:	ed 5b       	subi	r30, 0xBD	; 189
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a ef       	ldi	r20, 0xFA	; 250
    1964:	54 e4       	ldi	r21, 0x44	; 68
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	f8 01       	movw	r30, r16
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1978:	fe 01       	movw	r30, r28
    197a:	ff 96       	adiw	r30, 0x3f	; 63
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	2c f4       	brge	.+10     	; 0x199e <main+0x290>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9e af       	std	Y+62, r25	; 0x3e
    199a:	8d af       	std	Y+61, r24	; 0x3d
    199c:	46 c0       	rjmp	.+140    	; 0x1a2a <main+0x31c>
	else if (__tmp > 65535)
    199e:	fe 01       	movw	r30, r28
    19a0:	ff 96       	adiw	r30, 0x3f	; 63
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	64 f5       	brge	.+88     	; 0x1a12 <main+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	fe 01       	movw	r30, r28
    19bc:	ed 5b       	subi	r30, 0xBD	; 189
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9e af       	std	Y+62, r25	; 0x3e
    19e6:	8d af       	std	Y+61, r24	; 0x3d
    19e8:	0f c0       	rjmp	.+30     	; 0x1a08 <main+0x2fa>
    19ea:	88 ec       	ldi	r24, 0xC8	; 200
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c af       	std	Y+60, r25	; 0x3c
    19f0:	8b af       	std	Y+59, r24	; 0x3b
    19f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    19f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <main+0x2e8>
    19fa:	9c af       	std	Y+60, r25	; 0x3c
    19fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	9e af       	std	Y+62, r25	; 0x3e
    1a06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <main+0x2dc>
    1a10:	16 c0       	rjmp	.+44     	; 0x1a3e <main+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a12:	fe 01       	movw	r30, r28
    1a14:	ff 96       	adiw	r30, 0x3f	; 63
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	9e af       	std	Y+62, r25	; 0x3e
    1a28:	8d af       	std	Y+61, r24	; 0x3d
    1a2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a2e:	9a af       	std	Y+58, r25	; 0x3a
    1a30:	89 af       	std	Y+57, r24	; 0x39
    1a32:	89 ad       	ldd	r24, Y+57	; 0x39
    1a34:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <main+0x328>
    1a3a:	9a af       	std	Y+58, r25	; 0x3a
    1a3c:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(40);
					count1++;
    1a3e:	80 91 7b 00 	lds	r24, 0x007B
    1a42:	8f 5f       	subi	r24, 0xFF	; 255
    1a44:	80 93 7b 00 	sts	0x007B, r24
				}
				input = KEYPAD_getPressedKey();
    1a48:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <KEYPAD_getPressedKey>
    1a4c:	80 93 81 00 	sts	0x0081, r24
			_delay_ms(40);
		} else {
			input = KEYPAD_getPressedKey();
			count1 = 0, operator = 0;
			result = -1, first = 0, second = 0;
			while ((input != '+') && (input != '-') && (input != '*')
    1a50:	80 91 81 00 	lds	r24, 0x0081
    1a54:	8b 32       	cpi	r24, 0x2B	; 43
    1a56:	a9 f0       	breq	.+42     	; 0x1a82 <main+0x374>
    1a58:	80 91 81 00 	lds	r24, 0x0081
    1a5c:	8d 32       	cpi	r24, 0x2D	; 45
    1a5e:	89 f0       	breq	.+34     	; 0x1a82 <main+0x374>
    1a60:	80 91 81 00 	lds	r24, 0x0081
    1a64:	8a 32       	cpi	r24, 0x2A	; 42
    1a66:	69 f0       	breq	.+26     	; 0x1a82 <main+0x374>
    1a68:	80 91 81 00 	lds	r24, 0x0081
    1a6c:	8f 32       	cpi	r24, 0x2F	; 47
    1a6e:	49 f0       	breq	.+18     	; 0x1a82 <main+0x374>
    1a70:	80 91 81 00 	lds	r24, 0x0081
    1a74:	8d 33       	cpi	r24, 0x3D	; 61
    1a76:	29 f0       	breq	.+10     	; 0x1a82 <main+0x374>
    1a78:	80 91 81 00 	lds	r24, 0x0081
    1a7c:	83 34       	cpi	r24, 0x43	; 67
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <main+0x374>
    1a80:	35 cf       	rjmp	.-406    	; 0x18ec <main+0x1de>
					count1++;
				}
				input = KEYPAD_getPressedKey();
			}
		}
		operator = input;
    1a82:	80 91 81 00 	lds	r24, 0x0081
    1a86:	80 93 7c 00 	sts	0x007C, r24
		if (operator == '=') {
    1a8a:	80 91 7c 00 	lds	r24, 0x007C
    1a8e:	8d 33       	cpi	r24, 0x3D	; 61
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <main+0x386>
    1a92:	83 c0       	rjmp	.+262    	; 0x1b9a <main+0x48c>
			LCD_clearScreen();
    1a94:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
			LCD_displayString("The result : ");
    1a98:	80 e6       	ldi	r24, 0x60	; 96
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
			LCD_moveCursor(1, 0);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
			LCD_intgerToString(first);
    1aa8:	80 91 7d 00 	lds	r24, 0x007D
    1aac:	90 91 7e 00 	lds	r25, 0x007E
    1ab0:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <LCD_intgerToString>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a0 e2       	ldi	r26, 0x20	; 32
    1aba:	b2 e4       	ldi	r27, 0x42	; 66
    1abc:	8d ab       	std	Y+53, r24	; 0x35
    1abe:	9e ab       	std	Y+54, r25	; 0x36
    1ac0:	af ab       	std	Y+55, r26	; 0x37
    1ac2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac8:	8f a9       	ldd	r24, Y+55	; 0x37
    1aca:	98 ad       	ldd	r25, Y+56	; 0x38
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4a ef       	ldi	r20, 0xFA	; 250
    1ad2:	54 e4       	ldi	r21, 0x44	; 68
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	89 ab       	std	Y+49, r24	; 0x31
    1ade:	9a ab       	std	Y+50, r25	; 0x32
    1ae0:	ab ab       	std	Y+51, r26	; 0x33
    1ae2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ae4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aea:	9c a9       	ldd	r25, Y+52	; 0x34
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e8       	ldi	r20, 0x80	; 128
    1af2:	5f e3       	ldi	r21, 0x3F	; 63
    1af4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af8:	88 23       	and	r24, r24
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <main+0x3f8>
		__ticks = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	98 ab       	std	Y+48, r25	; 0x30
    1b02:	8f a7       	std	Y+47, r24	; 0x2f
    1b04:	3f c0       	rjmp	.+126    	; 0x1b84 <main+0x476>
	else if (__tmp > 65535)
    1b06:	69 a9       	ldd	r22, Y+49	; 0x31
    1b08:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	3f ef       	ldi	r19, 0xFF	; 255
    1b12:	4f e7       	ldi	r20, 0x7F	; 127
    1b14:	57 e4       	ldi	r21, 0x47	; 71
    1b16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	4c f5       	brge	.+82     	; 0x1b70 <main+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b20:	7e a9       	ldd	r23, Y+54	; 0x36
    1b22:	8f a9       	ldd	r24, Y+55	; 0x37
    1b24:	98 ad       	ldd	r25, Y+56	; 0x38
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	51 e4       	ldi	r21, 0x41	; 65
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	98 ab       	std	Y+48, r25	; 0x30
    1b44:	8f a7       	std	Y+47, r24	; 0x2f
    1b46:	0f c0       	rjmp	.+30     	; 0x1b66 <main+0x458>
    1b48:	88 ec       	ldi	r24, 0xC8	; 200
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9e a7       	std	Y+46, r25	; 0x2e
    1b4e:	8d a7       	std	Y+45, r24	; 0x2d
    1b50:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b52:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <main+0x446>
    1b58:	9e a7       	std	Y+46, r25	; 0x2e
    1b5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	98 ab       	std	Y+48, r25	; 0x30
    1b64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b68:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	69 f7       	brne	.-38     	; 0x1b48 <main+0x43a>
    1b6e:	e0 cd       	rjmp	.-1088   	; 0x1730 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b70:	69 a9       	ldd	r22, Y+49	; 0x31
    1b72:	7a a9       	ldd	r23, Y+50	; 0x32
    1b74:	8b a9       	ldd	r24, Y+51	; 0x33
    1b76:	9c a9       	ldd	r25, Y+52	; 0x34
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	98 ab       	std	Y+48, r25	; 0x30
    1b82:	8f a7       	std	Y+47, r24	; 0x2f
    1b84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b86:	98 a9       	ldd	r25, Y+48	; 0x30
    1b88:	9c a7       	std	Y+44, r25	; 0x2c
    1b8a:	8b a7       	std	Y+43, r24	; 0x2b
    1b8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <main+0x482>
    1b94:	9c a7       	std	Y+44, r25	; 0x2c
    1b96:	8b a7       	std	Y+43, r24	; 0x2b
    1b98:	cb cd       	rjmp	.-1130   	; 0x1730 <main+0x22>
			_delay_ms(40);
			continue;
		}

		//print the operator
		LCD_moveCursor(1, 0);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
		LCD_displayCharacter(input);
    1ba2:	80 91 81 00 	lds	r24, 0x0081
    1ba6:	0e 94 50 13 	call	0x26a0	; 0x26a0 <LCD_displayCharacter>
		count2 = 0;
    1baa:	10 92 76 00 	sts	0x0076, r1
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e2       	ldi	r26, 0x20	; 32
    1bb4:	b2 e4       	ldi	r27, 0x42	; 66
    1bb6:	8f a3       	std	Y+39, r24	; 0x27
    1bb8:	98 a7       	std	Y+40, r25	; 0x28
    1bba:	a9 a7       	std	Y+41, r26	; 0x29
    1bbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a ef       	ldi	r20, 0xFA	; 250
    1bcc:	54 e4       	ldi	r21, 0x44	; 68
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8b a3       	std	Y+35, r24	; 0x23
    1bd8:	9c a3       	std	Y+36, r25	; 0x24
    1bda:	ad a3       	std	Y+37, r26	; 0x25
    1bdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bde:	6b a1       	ldd	r22, Y+35	; 0x23
    1be0:	7c a1       	ldd	r23, Y+36	; 0x24
    1be2:	8d a1       	ldd	r24, Y+37	; 0x25
    1be4:	9e a1       	ldd	r25, Y+38	; 0x26
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <main+0x4f2>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9a a3       	std	Y+34, r25	; 0x22
    1bfc:	89 a3       	std	Y+33, r24	; 0x21
    1bfe:	3f c0       	rjmp	.+126    	; 0x1c7e <main+0x570>
	else if (__tmp > 65535)
    1c00:	6b a1       	ldd	r22, Y+35	; 0x23
    1c02:	7c a1       	ldd	r23, Y+36	; 0x24
    1c04:	8d a1       	ldd	r24, Y+37	; 0x25
    1c06:	9e a1       	ldd	r25, Y+38	; 0x26
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	3f ef       	ldi	r19, 0xFF	; 255
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	57 e4       	ldi	r21, 0x47	; 71
    1c10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	4c f5       	brge	.+82     	; 0x1c6a <main+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	6f a1       	ldd	r22, Y+39	; 0x27
    1c1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9a a3       	std	Y+34, r25	; 0x22
    1c3e:	89 a3       	std	Y+33, r24	; 0x21
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <main+0x552>
    1c42:	88 ec       	ldi	r24, 0xC8	; 200
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	98 a3       	std	Y+32, r25	; 0x20
    1c48:	8f 8f       	std	Y+31, r24	; 0x1f
    1c4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c4c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <main+0x540>
    1c52:	98 a3       	std	Y+32, r25	; 0x20
    1c54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	89 a1       	ldd	r24, Y+33	; 0x21
    1c58:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	9a a3       	std	Y+34, r25	; 0x22
    1c5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	89 a1       	ldd	r24, Y+33	; 0x21
    1c62:	9a a1       	ldd	r25, Y+34	; 0x22
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <main+0x534>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <main+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c70:	9e a1       	ldd	r25, Y+38	; 0x26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9a a3       	std	Y+34, r25	; 0x22
    1c7c:	89 a3       	std	Y+33, r24	; 0x21
    1c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c80:	9a a1       	ldd	r25, Y+34	; 0x22
    1c82:	9e 8f       	std	Y+30, r25	; 0x1e
    1c84:	8d 8f       	std	Y+29, r24	; 0x1d
    1c86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <main+0x57c>
    1c8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c90:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(40);
		input = KEYPAD_getPressedKey();
    1c92:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <KEYPAD_getPressedKey>
    1c96:	80 93 81 00 	sts	0x0081, r24
		count2 = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	80 93 76 00 	sts	0x0076, r24
    1ca0:	9f c0       	rjmp	.+318    	; 0x1de0 <main+0x6d2>

		//print the second number
		while (input != '=' ) {
			if (flag) {
    1ca2:	80 91 7a 00 	lds	r24, 0x007A
    1ca6:	88 23       	and	r24, r24
    1ca8:	19 f0       	breq	.+6      	; 0x1cb0 <main+0x5a2>
				flag = 0;
    1caa:	10 92 7a 00 	sts	0x007A, r1
    1cae:	9d c0       	rjmp	.+314    	; 0x1dea <main+0x6dc>
				break;
			} else {
				second = second * 10 + (input - '0');
    1cb0:	80 91 7f 00 	lds	r24, 0x007F
    1cb4:	90 91 80 00 	lds	r25, 0x0080
    1cb8:	9c 01       	movw	r18, r24
    1cba:	22 0f       	add	r18, r18
    1cbc:	33 1f       	adc	r19, r19
    1cbe:	c9 01       	movw	r24, r18
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	28 0f       	add	r18, r24
    1cca:	39 1f       	adc	r19, r25
    1ccc:	80 91 81 00 	lds	r24, 0x0081
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	82 0f       	add	r24, r18
    1cd6:	93 1f       	adc	r25, r19
    1cd8:	c0 97       	sbiw	r24, 0x30	; 48
    1cda:	90 93 80 00 	sts	0x0080, r25
    1cde:	80 93 7f 00 	sts	0x007F, r24
				LCD_displayCharacter(input);
    1ce2:	80 91 81 00 	lds	r24, 0x0081
    1ce6:	0e 94 50 13 	call	0x26a0	; 0x26a0 <LCD_displayCharacter>
				count2++;
    1cea:	80 91 76 00 	lds	r24, 0x0076
    1cee:	8f 5f       	subi	r24, 0xFF	; 255
    1cf0:	80 93 76 00 	sts	0x0076, r24
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a0 e2       	ldi	r26, 0x20	; 32
    1cfa:	b2 e4       	ldi	r27, 0x42	; 66
    1cfc:	89 8f       	std	Y+25, r24	; 0x19
    1cfe:	9a 8f       	std	Y+26, r25	; 0x1a
    1d00:	ab 8f       	std	Y+27, r26	; 0x1b
    1d02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d04:	69 8d       	ldd	r22, Y+25	; 0x19
    1d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4a ef       	ldi	r20, 0xFA	; 250
    1d12:	54 e4       	ldi	r21, 0x44	; 68
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8d 8b       	std	Y+21, r24	; 0x15
    1d1e:	9e 8b       	std	Y+22, r25	; 0x16
    1d20:	af 8b       	std	Y+23, r26	; 0x17
    1d22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d24:	6d 89       	ldd	r22, Y+21	; 0x15
    1d26:	7e 89       	ldd	r23, Y+22	; 0x16
    1d28:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <main+0x638>
		__ticks = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9c 8b       	std	Y+20, r25	; 0x14
    1d42:	8b 8b       	std	Y+19, r24	; 0x13
    1d44:	3f c0       	rjmp	.+126    	; 0x1dc4 <main+0x6b6>
	else if (__tmp > 65535)
    1d46:	6d 89       	ldd	r22, Y+21	; 0x15
    1d48:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	3f ef       	ldi	r19, 0xFF	; 255
    1d52:	4f e7       	ldi	r20, 0x7F	; 127
    1d54:	57 e4       	ldi	r21, 0x47	; 71
    1d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	4c f5       	brge	.+82     	; 0x1db0 <main+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <main+0x698>
    1d88:	88 ec       	ldi	r24, 0xC8	; 200
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9a 8b       	std	Y+18, r25	; 0x12
    1d8e:	89 8b       	std	Y+17, r24	; 0x11
    1d90:	89 89       	ldd	r24, Y+17	; 0x11
    1d92:	9a 89       	ldd	r25, Y+18	; 0x12
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <main+0x686>
    1d98:	9a 8b       	std	Y+18, r25	; 0x12
    1d9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da6:	8b 89       	ldd	r24, Y+19	; 0x13
    1da8:	9c 89       	ldd	r25, Y+20	; 0x14
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	69 f7       	brne	.-38     	; 0x1d88 <main+0x67a>
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <main+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db0:	6d 89       	ldd	r22, Y+21	; 0x15
    1db2:	7e 89       	ldd	r23, Y+22	; 0x16
    1db4:	8f 89       	ldd	r24, Y+23	; 0x17
    1db6:	98 8d       	ldd	r25, Y+24	; 0x18
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
    1dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc8:	98 8b       	std	Y+16, r25	; 0x10
    1dca:	8f 87       	std	Y+15, r24	; 0x0f
    1dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dce:	98 89       	ldd	r25, Y+16	; 0x10
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <main+0x6c2>
    1dd4:	98 8b       	std	Y+16, r25	; 0x10
    1dd6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(40);
			}
			input = KEYPAD_getPressedKey();
    1dd8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <KEYPAD_getPressedKey>
    1ddc:	80 93 81 00 	sts	0x0081, r24
		_delay_ms(40);
		input = KEYPAD_getPressedKey();
		count2 = 1;

		//print the second number
		while (input != '=' ) {
    1de0:	80 91 81 00 	lds	r24, 0x0081
    1de4:	8d 33       	cpi	r24, 0x3D	; 61
    1de6:	09 f0       	breq	.+2      	; 0x1dea <main+0x6dc>
    1de8:	5c cf       	rjmp	.-328    	; 0x1ca2 <main+0x594>
				_delay_ms(40);
			}
			input = KEYPAD_getPressedKey();
		}

		if (second != 0) {
    1dea:	80 91 7f 00 	lds	r24, 0x007F
    1dee:	90 91 80 00 	lds	r25, 0x0080
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <main+0x6ea>
    1df6:	9c cc       	rjmp	.-1736   	; 0x1730 <main+0x22>
			LCD_clearScreen();
    1df8:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
			LCD_displayString("The result : ");
    1dfc:	80 e6       	ldi	r24, 0x60	; 96
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
			LCD_moveCursor(1, 0);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
			result = operation(first, second, operator);
    1e0c:	80 91 7d 00 	lds	r24, 0x007D
    1e10:	90 91 7e 00 	lds	r25, 0x007E
    1e14:	20 91 7f 00 	lds	r18, 0x007F
    1e18:	30 91 80 00 	lds	r19, 0x0080
    1e1c:	40 91 7c 00 	lds	r20, 0x007C
    1e20:	b9 01       	movw	r22, r18
    1e22:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <operation>
    1e26:	90 93 78 00 	sts	0x0078, r25
    1e2a:	80 93 77 00 	sts	0x0077, r24
			LCD_intgerToString(operation(first, second, operator));
    1e2e:	80 91 7d 00 	lds	r24, 0x007D
    1e32:	90 91 7e 00 	lds	r25, 0x007E
    1e36:	20 91 7f 00 	lds	r18, 0x007F
    1e3a:	30 91 80 00 	lds	r19, 0x0080
    1e3e:	40 91 7c 00 	lds	r20, 0x007C
    1e42:	b9 01       	movw	r22, r18
    1e44:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <operation>
    1e48:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <LCD_intgerToString>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e2       	ldi	r26, 0x20	; 32
    1e52:	b2 e4       	ldi	r27, 0x42	; 66
    1e54:	8b 87       	std	Y+11, r24	; 0x0b
    1e56:	9c 87       	std	Y+12, r25	; 0x0c
    1e58:	ad 87       	std	Y+13, r26	; 0x0d
    1e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a ef       	ldi	r20, 0xFA	; 250
    1e6a:	54 e4       	ldi	r21, 0x44	; 68
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8f 83       	std	Y+7, r24	; 0x07
    1e76:	98 87       	std	Y+8, r25	; 0x08
    1e78:	a9 87       	std	Y+9, r26	; 0x09
    1e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7e:	78 85       	ldd	r23, Y+8	; 0x08
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	2c f4       	brge	.+10     	; 0x1e9e <main+0x790>
		__ticks = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	3f c0       	rjmp	.+126    	; 0x1f1c <main+0x80e>
	else if (__tmp > 65535)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	4c f5       	brge	.+82     	; 0x1f08 <main+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e2       	ldi	r20, 0x20	; 32
    1ec4:	51 e4       	ldi	r21, 0x41	; 65
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <main+0x7f0>
    1ee0:	88 ec       	ldi	r24, 0xC8	; 200
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9c 83       	std	Y+4, r25	; 0x04
    1ee6:	8b 83       	std	Y+3, r24	; 0x03
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <main+0x7de>
    1ef0:	9c 83       	std	Y+4, r25	; 0x04
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <main+0x7d2>
    1f06:	14 cc       	rjmp	.-2008   	; 0x1730 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0a:	78 85       	ldd	r23, Y+8	; 0x08
    1f0c:	89 85       	ldd	r24, Y+9	; 0x09
    1f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <main+0x81a>
    1f2c:	9a 83       	std	Y+2, r25	; 0x02
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	ff cb       	rjmp	.-2050   	; 0x1730 <main+0x22>

00001f32 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

u8 KEYPAD_getPressedKey(void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <KEYPAD_getPressedKey+0x6>
    1f38:	0f 92       	push	r0
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
	u8 col,row;
	DIO_SetPinDir(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, Input);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, Input);
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	61 e0       	ldi	r22, 0x01	; 1
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, Input);
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	62 e0       	ldi	r22, 0x02	; 2
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, Input);
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	63 e0       	ldi	r22, 0x03	; 3
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>

	DIO_SetPinDir(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, Input);
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	64 e0       	ldi	r22, 0x04	; 4
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
	DIO_SetPinValue(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID , High);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	64 e0       	ldi	r22, 0x04	; 4
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>
	DIO_SetPinDir(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, Input);
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	65 e0       	ldi	r22, 0x05	; 5
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
	DIO_SetPinValue(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1 , High);
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	65 e0       	ldi	r22, 0x05	; 5
    1f88:	41 e0       	ldi	r20, 0x01	; 1
    1f8a:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>
	DIO_SetPinDir(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, Input);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	66 e0       	ldi	r22, 0x06	; 6
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
	DIO_SetPinValue(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2 , High);
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	66 e0       	ldi	r22, 0x06	; 6
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>

	#if(KEYPAD_NUM_COLS == 4)
		DIO_SetPinDir(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, Input);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	67 e0       	ldi	r22, 0x07	; 7
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
		DIO_SetPinValue(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3 , High);
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	67 e0       	ldi	r22, 0x07	; 7
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>

#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1fb6:	19 82       	std	Y+1, r1	; 0x01
    1fb8:	3c c0       	rjmp	.+120    	; 0x2032 <KEYPAD_getPressedKey+0x100>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			DIO_SetPinDir(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,Output);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	69 81       	ldd	r22, Y+1	; 0x01
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
			/* Set/Clear the row output pin */
			DIO_SetPinValue(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	69 81       	ldd	r22, Y+1	; 0x01
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1fce:	1a 82       	std	Y+2, r1	; 0x02
    1fd0:	25 c0       	rjmp	.+74     	; 0x201c <KEYPAD_getPressedKey+0xea>
			{
				u8 pin_value = 0;
    1fd2:	1b 82       	std	Y+3, r1	; 0x03
				DIO_GetPinValue(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col, &pin_value);
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	98 2f       	mov	r25, r24
    1fd8:	9c 5f       	subi	r25, 0xFC	; 252
    1fda:	9e 01       	movw	r18, r28
    1fdc:	2d 5f       	subi	r18, 0xFD	; 253
    1fde:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	69 2f       	mov	r22, r25
    1fe4:	a9 01       	movw	r20, r18
    1fe6:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_GetPinValue>
				/* Check if the switch is pressed in this column */
				if( pin_value== KEYPAD_BUTTON_PRESSED)
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	88 23       	and	r24, r24
    1fee:	99 f4       	brne	.+38     	; 0x2016 <KEYPAD_getPressedKey+0xe4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	98 2f       	mov	r25, r24
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	89 0f       	add	r24, r25
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	0e 94 1d 10 	call	0x203a	; 0x203a <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			DIO_SetPinDir(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,Input);
		}
	}
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret
			 */
			DIO_SetPinDir(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,Output);
			/* Set/Clear the row output pin */
			DIO_SetPinValue(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	8f 5f       	subi	r24, 0xFF	; 255
    201a:	8a 83       	std	Y+2, r24	; 0x02
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	84 30       	cpi	r24, 0x04	; 4
    2020:	c0 f2       	brcs	.-80     	; 0x1fd2 <KEYPAD_getPressedKey+0xa0>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			DIO_SetPinDir(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,Input);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	69 81       	ldd	r22, Y+1	; 0x01
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
		DIO_SetPinValue(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3 , High);

#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	8f 5f       	subi	r24, 0xFF	; 255
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	84 30       	cpi	r24, 0x04	; 4
    2036:	08 f2       	brcs	.-126    	; 0x1fba <KEYPAD_getPressedKey+0x88>
    2038:	be cf       	rjmp	.-132    	; 0x1fb6 <KEYPAD_getPressedKey+0x84>

0000203a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	8a 83       	std	Y+2, r24	; 0x02
	u8 keypad_button = 0;
    2048:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	3c 83       	std	Y+4, r19	; 0x04
    2052:	2b 83       	std	Y+3, r18	; 0x03
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	88 30       	cpi	r24, 0x08	; 8
    205a:	91 05       	cpc	r25, r1
    205c:	09 f4       	brne	.+2      	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x26>
    205e:	70 c0       	rjmp	.+224    	; 0x2140 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2060:	2b 81       	ldd	r18, Y+3	; 0x03
    2062:	3c 81       	ldd	r19, Y+4	; 0x04
    2064:	29 30       	cpi	r18, 0x09	; 9
    2066:	31 05       	cpc	r19, r1
    2068:	5c f5       	brge	.+86     	; 0x20c0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	84 30       	cpi	r24, 0x04	; 4
    2070:	91 05       	cpc	r25, r1
    2072:	09 f4       	brne	.+2      	; 0x2076 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2074:	59 c0       	rjmp	.+178    	; 0x2128 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2076:	2b 81       	ldd	r18, Y+3	; 0x03
    2078:	3c 81       	ldd	r19, Y+4	; 0x04
    207a:	25 30       	cpi	r18, 0x05	; 5
    207c:	31 05       	cpc	r19, r1
    207e:	9c f4       	brge	.+38     	; 0x20a6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	91 05       	cpc	r25, r1
    2088:	09 f4       	brne	.+2      	; 0x208c <KEYPAD_4x4_adjustKeyNumber+0x52>
    208a:	48 c0       	rjmp	.+144    	; 0x211c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    208c:	2b 81       	ldd	r18, Y+3	; 0x03
    208e:	3c 81       	ldd	r19, Y+4	; 0x04
    2090:	23 30       	cpi	r18, 0x03	; 3
    2092:	31 05       	cpc	r19, r1
    2094:	0c f0       	brlt	.+2      	; 0x2098 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2096:	45 c0       	rjmp	.+138    	; 0x2122 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	91 05       	cpc	r25, r1
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    20a2:	39 c0       	rjmp	.+114    	; 0x2116 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    20a4:	68 c0       	rjmp	.+208    	; 0x2176 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    20a6:	2b 81       	ldd	r18, Y+3	; 0x03
    20a8:	3c 81       	ldd	r19, Y+4	; 0x04
    20aa:	26 30       	cpi	r18, 0x06	; 6
    20ac:	31 05       	cpc	r19, r1
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    20b0:	41 c0       	rjmp	.+130    	; 0x2134 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	87 30       	cpi	r24, 0x07	; 7
    20b8:	91 05       	cpc	r25, r1
    20ba:	0c f0       	brlt	.+2      	; 0x20be <KEYPAD_4x4_adjustKeyNumber+0x84>
    20bc:	3e c0       	rjmp	.+124    	; 0x213a <KEYPAD_4x4_adjustKeyNumber+0x100>
    20be:	37 c0       	rjmp	.+110    	; 0x212e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    20c0:	2b 81       	ldd	r18, Y+3	; 0x03
    20c2:	3c 81       	ldd	r19, Y+4	; 0x04
    20c4:	2c 30       	cpi	r18, 0x0C	; 12
    20c6:	31 05       	cpc	r19, r1
    20c8:	09 f4       	brne	.+2      	; 0x20cc <KEYPAD_4x4_adjustKeyNumber+0x92>
    20ca:	46 c0       	rjmp	.+140    	; 0x2158 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	8d 30       	cpi	r24, 0x0D	; 13
    20d2:	91 05       	cpc	r25, r1
    20d4:	5c f4       	brge	.+22     	; 0x20ec <KEYPAD_4x4_adjustKeyNumber+0xb2>
    20d6:	2b 81       	ldd	r18, Y+3	; 0x03
    20d8:	3c 81       	ldd	r19, Y+4	; 0x04
    20da:	2a 30       	cpi	r18, 0x0A	; 10
    20dc:	31 05       	cpc	r19, r1
    20de:	b1 f1       	breq	.+108    	; 0x214c <KEYPAD_4x4_adjustKeyNumber+0x112>
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	9c 81       	ldd	r25, Y+4	; 0x04
    20e4:	8b 30       	cpi	r24, 0x0B	; 11
    20e6:	91 05       	cpc	r25, r1
    20e8:	a4 f5       	brge	.+104    	; 0x2152 <KEYPAD_4x4_adjustKeyNumber+0x118>
    20ea:	2d c0       	rjmp	.+90     	; 0x2146 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    20ec:	2b 81       	ldd	r18, Y+3	; 0x03
    20ee:	3c 81       	ldd	r19, Y+4	; 0x04
    20f0:	2e 30       	cpi	r18, 0x0E	; 14
    20f2:	31 05       	cpc	r19, r1
    20f4:	b9 f1       	breq	.+110    	; 0x2164 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	8e 30       	cpi	r24, 0x0E	; 14
    20fc:	91 05       	cpc	r25, r1
    20fe:	7c f1       	brlt	.+94     	; 0x215e <KEYPAD_4x4_adjustKeyNumber+0x124>
    2100:	2b 81       	ldd	r18, Y+3	; 0x03
    2102:	3c 81       	ldd	r19, Y+4	; 0x04
    2104:	2f 30       	cpi	r18, 0x0F	; 15
    2106:	31 05       	cpc	r19, r1
    2108:	81 f1       	breq	.+96     	; 0x216a <KEYPAD_4x4_adjustKeyNumber+0x130>
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	80 31       	cpi	r24, 0x10	; 16
    2110:	91 05       	cpc	r25, r1
    2112:	71 f1       	breq	.+92     	; 0x2170 <KEYPAD_4x4_adjustKeyNumber+0x136>
    2114:	30 c0       	rjmp	.+96     	; 0x2176 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    2116:	87 e3       	ldi	r24, 0x37	; 55
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	2f c0       	rjmp	.+94     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    211c:	88 e3       	ldi	r24, 0x38	; 56
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	2c c0       	rjmp	.+88     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    2122:	89 e3       	ldi	r24, 0x39	; 57
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	29 c0       	rjmp	.+82     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    2128:	8f e2       	ldi	r24, 0x2F	; 47
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	26 c0       	rjmp	.+76     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    212e:	84 e3       	ldi	r24, 0x34	; 52
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	23 c0       	rjmp	.+70     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    2134:	85 e3       	ldi	r24, 0x35	; 53
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	20 c0       	rjmp	.+64     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    213a:	86 e3       	ldi	r24, 0x36	; 54
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	1d c0       	rjmp	.+58     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2140:	8a e2       	ldi	r24, 0x2A	; 42
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	1a c0       	rjmp	.+52     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 9: keypad_button = '1';
    2146:	81 e3       	ldi	r24, 0x31	; 49
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	17 c0       	rjmp	.+46     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    214c:	82 e3       	ldi	r24, 0x32	; 50
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	14 c0       	rjmp	.+40     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    2152:	83 e3       	ldi	r24, 0x33	; 51
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	11 c0       	rjmp	.+34     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2158:	8d e2       	ldi	r24, 0x2D	; 45
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	0e c0       	rjmp	.+28     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 'C';
    215e:	83 e4       	ldi	r24, 0x43	; 67
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	0b c0       	rjmp	.+22     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 14: keypad_button = '0';
    2164:	80 e3       	ldi	r24, 0x30	; 48
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	08 c0       	rjmp	.+16     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    216a:	8d e3       	ldi	r24, 0x3D	; 61
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	05 c0       	rjmp	.+10     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2170:	8b e2       	ldi	r24, 0x2B	; 43
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	02 c0       	rjmp	.+4      	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the DIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	2e 97       	sbiw	r28, 0x0e	; 14
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	DIO_SetPinDir(LCD_RS_PORT_ID,LCD_RS_PIN_ID,Output);
    219e:	83 e0       	ldi	r24, 0x03	; 3
    21a0:	64 e0       	ldi	r22, 0x04	; 4
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_E_PORT_ID,LCD_E_PIN_ID,Output);
    21a8:	83 e0       	ldi	r24, 0x03	; 3
    21aa:	65 e0       	ldi	r22, 0x05	; 5
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDir>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 ea       	ldi	r26, 0xA0	; 160
    21b8:	b1 e4       	ldi	r27, 0x41	; 65
    21ba:	8b 87       	std	Y+11, r24	; 0x0b
    21bc:	9c 87       	std	Y+12, r25	; 0x0c
    21be:	ad 87       	std	Y+13, r26	; 0x0d
    21c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a ef       	ldi	r20, 0xFA	; 250
    21d0:	54 e4       	ldi	r21, 0x44	; 68
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	8f 83       	std	Y+7, r24	; 0x07
    21dc:	98 87       	std	Y+8, r25	; 0x08
    21de:	a9 87       	std	Y+9, r26	; 0x09
    21e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e2:	6f 81       	ldd	r22, Y+7	; 0x07
    21e4:	78 85       	ldd	r23, Y+8	; 0x08
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <LCD_init+0x7a>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	3f c0       	rjmp	.+126    	; 0x2282 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	4c f5       	brge	.+82     	; 0x226e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	6b 85       	ldd	r22, Y+11	; 0x0b
    221e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2220:	8d 85       	ldd	r24, Y+13	; 0x0d
    2222:	9e 85       	ldd	r25, Y+14	; 0x0e
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <LCD_init+0xda>
    2246:	88 ec       	ldi	r24, 0xC8	; 200
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 83       	std	Y+4, r25	; 0x04
    224c:	8b 83       	std	Y+3, r24	; 0x03
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_init+0xc8>
    2256:	9c 83       	std	Y+4, r25	; 0x04
    2258:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	8d 81       	ldd	r24, Y+5	; 0x05
    225c:	9e 81       	ldd	r25, Y+6	; 0x06
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f7       	brne	.-38     	; 0x2246 <LCD_init+0xbc>
    226c:	14 c0       	rjmp	.+40     	; 0x2296 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_init+0x104>
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	DIO_SetPortDir(LCD_DATA_PORT_ID,Output);
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	61 e0       	ldi	r22, 0x01	; 1
    229a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_SetPortDir>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    229e:	88 e3       	ldi	r24, 0x38	; 56
    22a0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    22a4:	8c e0       	ldi	r24, 0x0C	; 12
    22a6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 61 11 	call	0x22c2	; 0x22c2 <LCD_sendCommand>
}
    22b0:	2e 96       	adiw	r28, 0x0e	; 14
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(u8 command)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	e9 97       	sbiw	r28, 0x39	; 57
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,Low); /* Instruction Mode RS=0 */
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	64 e0       	ldi	r22, 0x04	; 4
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e8       	ldi	r26, 0x80	; 128
    22e8:	bf e3       	ldi	r27, 0x3F	; 63
    22ea:	8d ab       	std	Y+53, r24	; 0x35
    22ec:	9e ab       	std	Y+54, r25	; 0x36
    22ee:	af ab       	std	Y+55, r26	; 0x37
    22f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f2:	6d a9       	ldd	r22, Y+53	; 0x35
    22f4:	7e a9       	ldd	r23, Y+54	; 0x36
    22f6:	8f a9       	ldd	r24, Y+55	; 0x37
    22f8:	98 ad       	ldd	r25, Y+56	; 0x38
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	4a ef       	ldi	r20, 0xFA	; 250
    2300:	54 e4       	ldi	r21, 0x44	; 68
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	89 ab       	std	Y+49, r24	; 0x31
    230c:	9a ab       	std	Y+50, r25	; 0x32
    230e:	ab ab       	std	Y+51, r26	; 0x33
    2310:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2312:	69 a9       	ldd	r22, Y+49	; 0x31
    2314:	7a a9       	ldd	r23, Y+50	; 0x32
    2316:	8b a9       	ldd	r24, Y+51	; 0x33
    2318:	9c a9       	ldd	r25, Y+52	; 0x34
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	2c f4       	brge	.+10     	; 0x2334 <LCD_sendCommand+0x72>
		__ticks = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	98 ab       	std	Y+48, r25	; 0x30
    2330:	8f a7       	std	Y+47, r24	; 0x2f
    2332:	3f c0       	rjmp	.+126    	; 0x23b2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2334:	69 a9       	ldd	r22, Y+49	; 0x31
    2336:	7a a9       	ldd	r23, Y+50	; 0x32
    2338:	8b a9       	ldd	r24, Y+51	; 0x33
    233a:	9c a9       	ldd	r25, Y+52	; 0x34
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	3f ef       	ldi	r19, 0xFF	; 255
    2340:	4f e7       	ldi	r20, 0x7F	; 127
    2342:	57 e4       	ldi	r21, 0x47	; 71
    2344:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2348:	18 16       	cp	r1, r24
    234a:	4c f5       	brge	.+82     	; 0x239e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234c:	6d a9       	ldd	r22, Y+53	; 0x35
    234e:	7e a9       	ldd	r23, Y+54	; 0x36
    2350:	8f a9       	ldd	r24, Y+55	; 0x37
    2352:	98 ad       	ldd	r25, Y+56	; 0x38
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e2       	ldi	r20, 0x20	; 32
    235a:	51 e4       	ldi	r21, 0x41	; 65
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	98 ab       	std	Y+48, r25	; 0x30
    2372:	8f a7       	std	Y+47, r24	; 0x2f
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <LCD_sendCommand+0xd2>
    2376:	88 ec       	ldi	r24, 0xC8	; 200
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9e a7       	std	Y+46, r25	; 0x2e
    237c:	8d a7       	std	Y+45, r24	; 0x2d
    237e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2380:	9e a5       	ldd	r25, Y+46	; 0x2e
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_sendCommand+0xc0>
    2386:	9e a7       	std	Y+46, r25	; 0x2e
    2388:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238a:	8f a5       	ldd	r24, Y+47	; 0x2f
    238c:	98 a9       	ldd	r25, Y+48	; 0x30
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	98 ab       	std	Y+48, r25	; 0x30
    2392:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2394:	8f a5       	ldd	r24, Y+47	; 0x2f
    2396:	98 a9       	ldd	r25, Y+48	; 0x30
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	69 f7       	brne	.-38     	; 0x2376 <LCD_sendCommand+0xb4>
    239c:	14 c0       	rjmp	.+40     	; 0x23c6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239e:	69 a9       	ldd	r22, Y+49	; 0x31
    23a0:	7a a9       	ldd	r23, Y+50	; 0x32
    23a2:	8b a9       	ldd	r24, Y+51	; 0x33
    23a4:	9c a9       	ldd	r25, Y+52	; 0x34
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	98 ab       	std	Y+48, r25	; 0x30
    23b0:	8f a7       	std	Y+47, r24	; 0x2f
    23b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b4:	98 a9       	ldd	r25, Y+48	; 0x30
    23b6:	9c a7       	std	Y+44, r25	; 0x2c
    23b8:	8b a7       	std	Y+43, r24	; 0x2b
    23ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    23bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_sendCommand+0xfc>
    23c2:	9c a7       	std	Y+44, r25	; 0x2c
    23c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_SetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,High); /* Enable LCD E=1 */
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	65 e0       	ldi	r22, 0x05	; 5
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a0 e8       	ldi	r26, 0x80	; 128
    23d6:	bf e3       	ldi	r27, 0x3F	; 63
    23d8:	8f a3       	std	Y+39, r24	; 0x27
    23da:	98 a7       	std	Y+40, r25	; 0x28
    23dc:	a9 a7       	std	Y+41, r26	; 0x29
    23de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e0:	6f a1       	ldd	r22, Y+39	; 0x27
    23e2:	78 a5       	ldd	r23, Y+40	; 0x28
    23e4:	89 a5       	ldd	r24, Y+41	; 0x29
    23e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a ef       	ldi	r20, 0xFA	; 250
    23ee:	54 e4       	ldi	r21, 0x44	; 68
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8b a3       	std	Y+35, r24	; 0x23
    23fa:	9c a3       	std	Y+36, r25	; 0x24
    23fc:	ad a3       	std	Y+37, r26	; 0x25
    23fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2400:	6b a1       	ldd	r22, Y+35	; 0x23
    2402:	7c a1       	ldd	r23, Y+36	; 0x24
    2404:	8d a1       	ldd	r24, Y+37	; 0x25
    2406:	9e a1       	ldd	r25, Y+38	; 0x26
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	2c f4       	brge	.+10     	; 0x2422 <LCD_sendCommand+0x160>
		__ticks = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9a a3       	std	Y+34, r25	; 0x22
    241e:	89 a3       	std	Y+33, r24	; 0x21
    2420:	3f c0       	rjmp	.+126    	; 0x24a0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2422:	6b a1       	ldd	r22, Y+35	; 0x23
    2424:	7c a1       	ldd	r23, Y+36	; 0x24
    2426:	8d a1       	ldd	r24, Y+37	; 0x25
    2428:	9e a1       	ldd	r25, Y+38	; 0x26
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	4c f5       	brge	.+82     	; 0x248c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	6f a1       	ldd	r22, Y+39	; 0x27
    243c:	78 a5       	ldd	r23, Y+40	; 0x28
    243e:	89 a5       	ldd	r24, Y+41	; 0x29
    2440:	9a a5       	ldd	r25, Y+42	; 0x2a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9a a3       	std	Y+34, r25	; 0x22
    2460:	89 a3       	std	Y+33, r24	; 0x21
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <LCD_sendCommand+0x1c0>
    2464:	88 ec       	ldi	r24, 0xC8	; 200
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	98 a3       	std	Y+32, r25	; 0x20
    246a:	8f 8f       	std	Y+31, r24	; 0x1f
    246c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    246e:	98 a1       	ldd	r25, Y+32	; 0x20
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_sendCommand+0x1ae>
    2474:	98 a3       	std	Y+32, r25	; 0x20
    2476:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	89 a1       	ldd	r24, Y+33	; 0x21
    247a:	9a a1       	ldd	r25, Y+34	; 0x22
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	9a a3       	std	Y+34, r25	; 0x22
    2480:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2482:	89 a1       	ldd	r24, Y+33	; 0x21
    2484:	9a a1       	ldd	r25, Y+34	; 0x22
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f7       	brne	.-38     	; 0x2464 <LCD_sendCommand+0x1a2>
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	6b a1       	ldd	r22, Y+35	; 0x23
    248e:	7c a1       	ldd	r23, Y+36	; 0x24
    2490:	8d a1       	ldd	r24, Y+37	; 0x25
    2492:	9e a1       	ldd	r25, Y+38	; 0x26
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9a a3       	std	Y+34, r25	; 0x22
    249e:	89 a3       	std	Y+33, r24	; 0x21
    24a0:	89 a1       	ldd	r24, Y+33	; 0x21
    24a2:	9a a1       	ldd	r25, Y+34	; 0x22
    24a4:	9e 8f       	std	Y+30, r25	; 0x1e
    24a6:	8d 8f       	std	Y+29, r24	; 0x1d
    24a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_sendCommand+0x1ea>
    24b0:	9e 8f       	std	Y+30, r25	; 0x1e
    24b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_SetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,Low); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	DIO_SetPortValue(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	69 ad       	ldd	r22, Y+57	; 0x39
    24b8:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_SetPortValue>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	a0 e8       	ldi	r26, 0x80	; 128
    24c2:	bf e3       	ldi	r27, 0x3F	; 63
    24c4:	89 8f       	std	Y+25, r24	; 0x19
    24c6:	9a 8f       	std	Y+26, r25	; 0x1a
    24c8:	ab 8f       	std	Y+27, r26	; 0x1b
    24ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24cc:	69 8d       	ldd	r22, Y+25	; 0x19
    24ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	4a ef       	ldi	r20, 0xFA	; 250
    24da:	54 e4       	ldi	r21, 0x44	; 68
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	8d 8b       	std	Y+21, r24	; 0x15
    24e6:	9e 8b       	std	Y+22, r25	; 0x16
    24e8:	af 8b       	std	Y+23, r26	; 0x17
    24ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ec:	6d 89       	ldd	r22, Y+21	; 0x15
    24ee:	7e 89       	ldd	r23, Y+22	; 0x16
    24f0:	8f 89       	ldd	r24, Y+23	; 0x17
    24f2:	98 8d       	ldd	r25, Y+24	; 0x18
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e8       	ldi	r20, 0x80	; 128
    24fa:	5f e3       	ldi	r21, 0x3F	; 63
    24fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2500:	88 23       	and	r24, r24
    2502:	2c f4       	brge	.+10     	; 0x250e <LCD_sendCommand+0x24c>
		__ticks = 1;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c 8b       	std	Y+20, r25	; 0x14
    250a:	8b 8b       	std	Y+19, r24	; 0x13
    250c:	3f c0       	rjmp	.+126    	; 0x258c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    250e:	6d 89       	ldd	r22, Y+21	; 0x15
    2510:	7e 89       	ldd	r23, Y+22	; 0x16
    2512:	8f 89       	ldd	r24, Y+23	; 0x17
    2514:	98 8d       	ldd	r25, Y+24	; 0x18
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	4c f5       	brge	.+82     	; 0x2578 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2526:	69 8d       	ldd	r22, Y+25	; 0x19
    2528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    252a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    252c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e2       	ldi	r20, 0x20	; 32
    2534:	51 e4       	ldi	r21, 0x41	; 65
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9c 8b       	std	Y+20, r25	; 0x14
    254c:	8b 8b       	std	Y+19, r24	; 0x13
    254e:	0f c0       	rjmp	.+30     	; 0x256e <LCD_sendCommand+0x2ac>
    2550:	88 ec       	ldi	r24, 0xC8	; 200
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9a 8b       	std	Y+18, r25	; 0x12
    2556:	89 8b       	std	Y+17, r24	; 0x11
    2558:	89 89       	ldd	r24, Y+17	; 0x11
    255a:	9a 89       	ldd	r25, Y+18	; 0x12
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <LCD_sendCommand+0x29a>
    2560:	9a 8b       	std	Y+18, r25	; 0x12
    2562:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2564:	8b 89       	ldd	r24, Y+19	; 0x13
    2566:	9c 89       	ldd	r25, Y+20	; 0x14
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	9c 8b       	std	Y+20, r25	; 0x14
    256c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256e:	8b 89       	ldd	r24, Y+19	; 0x13
    2570:	9c 89       	ldd	r25, Y+20	; 0x14
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	69 f7       	brne	.-38     	; 0x2550 <LCD_sendCommand+0x28e>
    2576:	14 c0       	rjmp	.+40     	; 0x25a0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2578:	6d 89       	ldd	r22, Y+21	; 0x15
    257a:	7e 89       	ldd	r23, Y+22	; 0x16
    257c:	8f 89       	ldd	r24, Y+23	; 0x17
    257e:	98 8d       	ldd	r25, Y+24	; 0x18
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9c 8b       	std	Y+20, r25	; 0x14
    258a:	8b 8b       	std	Y+19, r24	; 0x13
    258c:	8b 89       	ldd	r24, Y+19	; 0x13
    258e:	9c 89       	ldd	r25, Y+20	; 0x14
    2590:	98 8b       	std	Y+16, r25	; 0x10
    2592:	8f 87       	std	Y+15, r24	; 0x0f
    2594:	8f 85       	ldd	r24, Y+15	; 0x0f
    2596:	98 89       	ldd	r25, Y+16	; 0x10
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <LCD_sendCommand+0x2d6>
    259c:	98 8b       	std	Y+16, r25	; 0x10
    259e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_SetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,Low); /* Disable LCD E=0 */
    25a0:	83 e0       	ldi	r24, 0x03	; 3
    25a2:	65 e0       	ldi	r22, 0x05	; 5
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e8       	ldi	r26, 0x80	; 128
    25b0:	bf e3       	ldi	r27, 0x3F	; 63
    25b2:	8b 87       	std	Y+11, r24	; 0x0b
    25b4:	9c 87       	std	Y+12, r25	; 0x0c
    25b6:	ad 87       	std	Y+13, r26	; 0x0d
    25b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    25bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25be:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4a ef       	ldi	r20, 0xFA	; 250
    25c8:	54 e4       	ldi	r21, 0x44	; 68
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	8f 83       	std	Y+7, r24	; 0x07
    25d4:	98 87       	std	Y+8, r25	; 0x08
    25d6:	a9 87       	std	Y+9, r26	; 0x09
    25d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	2c f4       	brge	.+10     	; 0x25fc <LCD_sendCommand+0x33a>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	8d 83       	std	Y+5, r24	; 0x05
    25fa:	3f c0       	rjmp	.+126    	; 0x267a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    25fc:	6f 81       	ldd	r22, Y+7	; 0x07
    25fe:	78 85       	ldd	r23, Y+8	; 0x08
    2600:	89 85       	ldd	r24, Y+9	; 0x09
    2602:	9a 85       	ldd	r25, Y+10	; 0x0a
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	57 e4       	ldi	r21, 0x47	; 71
    260c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2610:	18 16       	cp	r1, r24
    2612:	4c f5       	brge	.+82     	; 0x2666 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2614:	6b 85       	ldd	r22, Y+11	; 0x0b
    2616:	7c 85       	ldd	r23, Y+12	; 0x0c
    2618:	8d 85       	ldd	r24, Y+13	; 0x0d
    261a:	9e 85       	ldd	r25, Y+14	; 0x0e
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e2       	ldi	r20, 0x20	; 32
    2622:	51 e4       	ldi	r21, 0x41	; 65
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	0f c0       	rjmp	.+30     	; 0x265c <LCD_sendCommand+0x39a>
    263e:	88 ec       	ldi	r24, 0xC8	; 200
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9c 83       	std	Y+4, r25	; 0x04
    2644:	8b 83       	std	Y+3, r24	; 0x03
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <LCD_sendCommand+0x388>
    264e:	9c 83       	std	Y+4, r25	; 0x04
    2650:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	9e 83       	std	Y+6, r25	; 0x06
    265a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	9e 81       	ldd	r25, Y+6	; 0x06
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	69 f7       	brne	.-38     	; 0x263e <LCD_sendCommand+0x37c>
    2664:	14 c0       	rjmp	.+40     	; 0x268e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2666:	6f 81       	ldd	r22, Y+7	; 0x07
    2668:	78 85       	ldd	r23, Y+8	; 0x08
    266a:	89 85       	ldd	r24, Y+9	; 0x09
    266c:	9a 85       	ldd	r25, Y+10	; 0x0a
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9e 83       	std	Y+6, r25	; 0x06
    2678:	8d 83       	std	Y+5, r24	; 0x05
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	9a 83       	std	Y+2, r25	; 0x02
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <LCD_sendCommand+0x3c4>
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    268e:	e9 96       	adiw	r28, 0x39	; 57
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(u8 data)
{
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	e9 97       	sbiw	r28, 0x39	; 57
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,High); /* Data Mode RS=1 */
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	64 e0       	ldi	r22, 0x04	; 4
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e8       	ldi	r26, 0x80	; 128
    26c6:	bf e3       	ldi	r27, 0x3F	; 63
    26c8:	8d ab       	std	Y+53, r24	; 0x35
    26ca:	9e ab       	std	Y+54, r25	; 0x36
    26cc:	af ab       	std	Y+55, r26	; 0x37
    26ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d0:	6d a9       	ldd	r22, Y+53	; 0x35
    26d2:	7e a9       	ldd	r23, Y+54	; 0x36
    26d4:	8f a9       	ldd	r24, Y+55	; 0x37
    26d6:	98 ad       	ldd	r25, Y+56	; 0x38
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a ef       	ldi	r20, 0xFA	; 250
    26de:	54 e4       	ldi	r21, 0x44	; 68
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	89 ab       	std	Y+49, r24	; 0x31
    26ea:	9a ab       	std	Y+50, r25	; 0x32
    26ec:	ab ab       	std	Y+51, r26	; 0x33
    26ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26f0:	69 a9       	ldd	r22, Y+49	; 0x31
    26f2:	7a a9       	ldd	r23, Y+50	; 0x32
    26f4:	8b a9       	ldd	r24, Y+51	; 0x33
    26f6:	9c a9       	ldd	r25, Y+52	; 0x34
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2704:	88 23       	and	r24, r24
    2706:	2c f4       	brge	.+10     	; 0x2712 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	98 ab       	std	Y+48, r25	; 0x30
    270e:	8f a7       	std	Y+47, r24	; 0x2f
    2710:	3f c0       	rjmp	.+126    	; 0x2790 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2712:	69 a9       	ldd	r22, Y+49	; 0x31
    2714:	7a a9       	ldd	r23, Y+50	; 0x32
    2716:	8b a9       	ldd	r24, Y+51	; 0x33
    2718:	9c a9       	ldd	r25, Y+52	; 0x34
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	4c f5       	brge	.+82     	; 0x277c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	6d a9       	ldd	r22, Y+53	; 0x35
    272c:	7e a9       	ldd	r23, Y+54	; 0x36
    272e:	8f a9       	ldd	r24, Y+55	; 0x37
    2730:	98 ad       	ldd	r25, Y+56	; 0x38
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	98 ab       	std	Y+48, r25	; 0x30
    2750:	8f a7       	std	Y+47, r24	; 0x2f
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <LCD_displayCharacter+0xd2>
    2754:	88 ec       	ldi	r24, 0xC8	; 200
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9e a7       	std	Y+46, r25	; 0x2e
    275a:	8d a7       	std	Y+45, r24	; 0x2d
    275c:	8d a5       	ldd	r24, Y+45	; 0x2d
    275e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <LCD_displayCharacter+0xc0>
    2764:	9e a7       	std	Y+46, r25	; 0x2e
    2766:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2768:	8f a5       	ldd	r24, Y+47	; 0x2f
    276a:	98 a9       	ldd	r25, Y+48	; 0x30
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	98 ab       	std	Y+48, r25	; 0x30
    2770:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2772:	8f a5       	ldd	r24, Y+47	; 0x2f
    2774:	98 a9       	ldd	r25, Y+48	; 0x30
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	69 f7       	brne	.-38     	; 0x2754 <LCD_displayCharacter+0xb4>
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	69 a9       	ldd	r22, Y+49	; 0x31
    277e:	7a a9       	ldd	r23, Y+50	; 0x32
    2780:	8b a9       	ldd	r24, Y+51	; 0x33
    2782:	9c a9       	ldd	r25, Y+52	; 0x34
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	98 ab       	std	Y+48, r25	; 0x30
    278e:	8f a7       	std	Y+47, r24	; 0x2f
    2790:	8f a5       	ldd	r24, Y+47	; 0x2f
    2792:	98 a9       	ldd	r25, Y+48	; 0x30
    2794:	9c a7       	std	Y+44, r25	; 0x2c
    2796:	8b a7       	std	Y+43, r24	; 0x2b
    2798:	8b a5       	ldd	r24, Y+43	; 0x2b
    279a:	9c a5       	ldd	r25, Y+44	; 0x2c
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <LCD_displayCharacter+0xfc>
    27a0:	9c a7       	std	Y+44, r25	; 0x2c
    27a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_SetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,High); /* Enable LCD E=1 */
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	65 e0       	ldi	r22, 0x05	; 5
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	a0 e8       	ldi	r26, 0x80	; 128
    27b4:	bf e3       	ldi	r27, 0x3F	; 63
    27b6:	8f a3       	std	Y+39, r24	; 0x27
    27b8:	98 a7       	std	Y+40, r25	; 0x28
    27ba:	a9 a7       	std	Y+41, r26	; 0x29
    27bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27be:	6f a1       	ldd	r22, Y+39	; 0x27
    27c0:	78 a5       	ldd	r23, Y+40	; 0x28
    27c2:	89 a5       	ldd	r24, Y+41	; 0x29
    27c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	4a ef       	ldi	r20, 0xFA	; 250
    27cc:	54 e4       	ldi	r21, 0x44	; 68
    27ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	8b a3       	std	Y+35, r24	; 0x23
    27d8:	9c a3       	std	Y+36, r25	; 0x24
    27da:	ad a3       	std	Y+37, r26	; 0x25
    27dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27de:	6b a1       	ldd	r22, Y+35	; 0x23
    27e0:	7c a1       	ldd	r23, Y+36	; 0x24
    27e2:	8d a1       	ldd	r24, Y+37	; 0x25
    27e4:	9e a1       	ldd	r25, Y+38	; 0x26
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e8       	ldi	r20, 0x80	; 128
    27ec:	5f e3       	ldi	r21, 0x3F	; 63
    27ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f2:	88 23       	and	r24, r24
    27f4:	2c f4       	brge	.+10     	; 0x2800 <LCD_displayCharacter+0x160>
		__ticks = 1;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9a a3       	std	Y+34, r25	; 0x22
    27fc:	89 a3       	std	Y+33, r24	; 0x21
    27fe:	3f c0       	rjmp	.+126    	; 0x287e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2800:	6b a1       	ldd	r22, Y+35	; 0x23
    2802:	7c a1       	ldd	r23, Y+36	; 0x24
    2804:	8d a1       	ldd	r24, Y+37	; 0x25
    2806:	9e a1       	ldd	r25, Y+38	; 0x26
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	3f ef       	ldi	r19, 0xFF	; 255
    280c:	4f e7       	ldi	r20, 0x7F	; 127
    280e:	57 e4       	ldi	r21, 0x47	; 71
    2810:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2814:	18 16       	cp	r1, r24
    2816:	4c f5       	brge	.+82     	; 0x286a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2818:	6f a1       	ldd	r22, Y+39	; 0x27
    281a:	78 a5       	ldd	r23, Y+40	; 0x28
    281c:	89 a5       	ldd	r24, Y+41	; 0x29
    281e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e2       	ldi	r20, 0x20	; 32
    2826:	51 e4       	ldi	r21, 0x41	; 65
    2828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	9a a3       	std	Y+34, r25	; 0x22
    283e:	89 a3       	std	Y+33, r24	; 0x21
    2840:	0f c0       	rjmp	.+30     	; 0x2860 <LCD_displayCharacter+0x1c0>
    2842:	88 ec       	ldi	r24, 0xC8	; 200
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	98 a3       	std	Y+32, r25	; 0x20
    2848:	8f 8f       	std	Y+31, r24	; 0x1f
    284a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    284c:	98 a1       	ldd	r25, Y+32	; 0x20
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	f1 f7       	brne	.-4      	; 0x284e <LCD_displayCharacter+0x1ae>
    2852:	98 a3       	std	Y+32, r25	; 0x20
    2854:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2856:	89 a1       	ldd	r24, Y+33	; 0x21
    2858:	9a a1       	ldd	r25, Y+34	; 0x22
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	9a a3       	std	Y+34, r25	; 0x22
    285e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2860:	89 a1       	ldd	r24, Y+33	; 0x21
    2862:	9a a1       	ldd	r25, Y+34	; 0x22
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	69 f7       	brne	.-38     	; 0x2842 <LCD_displayCharacter+0x1a2>
    2868:	14 c0       	rjmp	.+40     	; 0x2892 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286a:	6b a1       	ldd	r22, Y+35	; 0x23
    286c:	7c a1       	ldd	r23, Y+36	; 0x24
    286e:	8d a1       	ldd	r24, Y+37	; 0x25
    2870:	9e a1       	ldd	r25, Y+38	; 0x26
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9a a3       	std	Y+34, r25	; 0x22
    287c:	89 a3       	std	Y+33, r24	; 0x21
    287e:	89 a1       	ldd	r24, Y+33	; 0x21
    2880:	9a a1       	ldd	r25, Y+34	; 0x22
    2882:	9e 8f       	std	Y+30, r25	; 0x1e
    2884:	8d 8f       	std	Y+29, r24	; 0x1d
    2886:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2888:	9e 8d       	ldd	r25, Y+30	; 0x1e
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <LCD_displayCharacter+0x1ea>
    288e:	9e 8f       	std	Y+30, r25	; 0x1e
    2890:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_SetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,Low); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	DIO_SetPortValue(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	69 ad       	ldd	r22, Y+57	; 0x39
    2896:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_SetPortValue>
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	a0 e8       	ldi	r26, 0x80	; 128
    28a0:	bf e3       	ldi	r27, 0x3F	; 63
    28a2:	89 8f       	std	Y+25, r24	; 0x19
    28a4:	9a 8f       	std	Y+26, r25	; 0x1a
    28a6:	ab 8f       	std	Y+27, r26	; 0x1b
    28a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28aa:	69 8d       	ldd	r22, Y+25	; 0x19
    28ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4a ef       	ldi	r20, 0xFA	; 250
    28b8:	54 e4       	ldi	r21, 0x44	; 68
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	8d 8b       	std	Y+21, r24	; 0x15
    28c4:	9e 8b       	std	Y+22, r25	; 0x16
    28c6:	af 8b       	std	Y+23, r26	; 0x17
    28c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ca:	6d 89       	ldd	r22, Y+21	; 0x15
    28cc:	7e 89       	ldd	r23, Y+22	; 0x16
    28ce:	8f 89       	ldd	r24, Y+23	; 0x17
    28d0:	98 8d       	ldd	r25, Y+24	; 0x18
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e8       	ldi	r20, 0x80	; 128
    28d8:	5f e3       	ldi	r21, 0x3F	; 63
    28da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28de:	88 23       	and	r24, r24
    28e0:	2c f4       	brge	.+10     	; 0x28ec <LCD_displayCharacter+0x24c>
		__ticks = 1;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9c 8b       	std	Y+20, r25	; 0x14
    28e8:	8b 8b       	std	Y+19, r24	; 0x13
    28ea:	3f c0       	rjmp	.+126    	; 0x296a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    28ec:	6d 89       	ldd	r22, Y+21	; 0x15
    28ee:	7e 89       	ldd	r23, Y+22	; 0x16
    28f0:	8f 89       	ldd	r24, Y+23	; 0x17
    28f2:	98 8d       	ldd	r25, Y+24	; 0x18
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	3f ef       	ldi	r19, 0xFF	; 255
    28f8:	4f e7       	ldi	r20, 0x7F	; 127
    28fa:	57 e4       	ldi	r21, 0x47	; 71
    28fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2900:	18 16       	cp	r1, r24
    2902:	4c f5       	brge	.+82     	; 0x2956 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	69 8d       	ldd	r22, Y+25	; 0x19
    2906:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2908:	8b 8d       	ldd	r24, Y+27	; 0x1b
    290a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e2       	ldi	r20, 0x20	; 32
    2912:	51 e4       	ldi	r21, 0x41	; 65
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9c 8b       	std	Y+20, r25	; 0x14
    292a:	8b 8b       	std	Y+19, r24	; 0x13
    292c:	0f c0       	rjmp	.+30     	; 0x294c <LCD_displayCharacter+0x2ac>
    292e:	88 ec       	ldi	r24, 0xC8	; 200
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9a 8b       	std	Y+18, r25	; 0x12
    2934:	89 8b       	std	Y+17, r24	; 0x11
    2936:	89 89       	ldd	r24, Y+17	; 0x11
    2938:	9a 89       	ldd	r25, Y+18	; 0x12
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <LCD_displayCharacter+0x29a>
    293e:	9a 8b       	std	Y+18, r25	; 0x12
    2940:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2942:	8b 89       	ldd	r24, Y+19	; 0x13
    2944:	9c 89       	ldd	r25, Y+20	; 0x14
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	9c 8b       	std	Y+20, r25	; 0x14
    294a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294c:	8b 89       	ldd	r24, Y+19	; 0x13
    294e:	9c 89       	ldd	r25, Y+20	; 0x14
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	69 f7       	brne	.-38     	; 0x292e <LCD_displayCharacter+0x28e>
    2954:	14 c0       	rjmp	.+40     	; 0x297e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2956:	6d 89       	ldd	r22, Y+21	; 0x15
    2958:	7e 89       	ldd	r23, Y+22	; 0x16
    295a:	8f 89       	ldd	r24, Y+23	; 0x17
    295c:	98 8d       	ldd	r25, Y+24	; 0x18
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9c 8b       	std	Y+20, r25	; 0x14
    2968:	8b 8b       	std	Y+19, r24	; 0x13
    296a:	8b 89       	ldd	r24, Y+19	; 0x13
    296c:	9c 89       	ldd	r25, Y+20	; 0x14
    296e:	98 8b       	std	Y+16, r25	; 0x10
    2970:	8f 87       	std	Y+15, r24	; 0x0f
    2972:	8f 85       	ldd	r24, Y+15	; 0x0f
    2974:	98 89       	ldd	r25, Y+16	; 0x10
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <LCD_displayCharacter+0x2d6>
    297a:	98 8b       	std	Y+16, r25	; 0x10
    297c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_SetPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,Low); /* Disable LCD E=0 */
    297e:	83 e0       	ldi	r24, 0x03	; 3
    2980:	65 e0       	ldi	r22, 0x05	; 5
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_SetPinValue>
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	a0 e8       	ldi	r26, 0x80	; 128
    298e:	bf e3       	ldi	r27, 0x3F	; 63
    2990:	8b 87       	std	Y+11, r24	; 0x0b
    2992:	9c 87       	std	Y+12, r25	; 0x0c
    2994:	ad 87       	std	Y+13, r26	; 0x0d
    2996:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2998:	6b 85       	ldd	r22, Y+11	; 0x0b
    299a:	7c 85       	ldd	r23, Y+12	; 0x0c
    299c:	8d 85       	ldd	r24, Y+13	; 0x0d
    299e:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	4a ef       	ldi	r20, 0xFA	; 250
    29a6:	54 e4       	ldi	r21, 0x44	; 68
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	8f 83       	std	Y+7, r24	; 0x07
    29b2:	98 87       	std	Y+8, r25	; 0x08
    29b4:	a9 87       	std	Y+9, r26	; 0x09
    29b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e8       	ldi	r20, 0x80	; 128
    29c6:	5f e3       	ldi	r21, 0x3F	; 63
    29c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29cc:	88 23       	and	r24, r24
    29ce:	2c f4       	brge	.+10     	; 0x29da <LCD_displayCharacter+0x33a>
		__ticks = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9e 83       	std	Y+6, r25	; 0x06
    29d6:	8d 83       	std	Y+5, r24	; 0x05
    29d8:	3f c0       	rjmp	.+126    	; 0x2a58 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    29da:	6f 81       	ldd	r22, Y+7	; 0x07
    29dc:	78 85       	ldd	r23, Y+8	; 0x08
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	3f ef       	ldi	r19, 0xFF	; 255
    29e6:	4f e7       	ldi	r20, 0x7F	; 127
    29e8:	57 e4       	ldi	r21, 0x47	; 71
    29ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ee:	18 16       	cp	r1, r24
    29f0:	4c f5       	brge	.+82     	; 0x2a44 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e2       	ldi	r20, 0x20	; 32
    2a00:	51 e4       	ldi	r21, 0x41	; 65
    2a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	9e 83       	std	Y+6, r25	; 0x06
    2a18:	8d 83       	std	Y+5, r24	; 0x05
    2a1a:	0f c0       	rjmp	.+30     	; 0x2a3a <LCD_displayCharacter+0x39a>
    2a1c:	88 ec       	ldi	r24, 0xC8	; 200
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	9c 83       	std	Y+4, r25	; 0x04
    2a22:	8b 83       	std	Y+3, r24	; 0x03
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	9c 81       	ldd	r25, Y+4	; 0x04
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_displayCharacter+0x388>
    2a2c:	9c 83       	std	Y+4, r25	; 0x04
    2a2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	9e 81       	ldd	r25, Y+6	; 0x06
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	9e 83       	std	Y+6, r25	; 0x06
    2a38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	69 f7       	brne	.-38     	; 0x2a1c <LCD_displayCharacter+0x37c>
    2a42:	14 c0       	rjmp	.+40     	; 0x2a6c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a44:	6f 81       	ldd	r22, Y+7	; 0x07
    2a46:	78 85       	ldd	r23, Y+8	; 0x08
    2a48:	89 85       	ldd	r24, Y+9	; 0x09
    2a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <LCD_displayCharacter+0x3c4>
    2a68:	9a 83       	std	Y+2, r25	; 0x02
    2a6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a6c:	e9 96       	adiw	r28, 0x39	; 57
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <LCD_displayString+0x6>
    2a84:	0f 92       	push	r0
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	9b 83       	std	Y+3, r25	; 0x03
    2a8c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2a8e:	19 82       	std	Y+1, r1	; 0x01
    2a90:	0e c0       	rjmp	.+28     	; 0x2aae <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	e2 0f       	add	r30, r18
    2aa0:	f3 1f       	adc	r31, r19
    2aa2:	80 81       	ld	r24, Z
    2aa4:	0e 94 50 13 	call	0x26a0	; 0x26a0 <LCD_displayCharacter>
		i++;
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	8f 5f       	subi	r24, 0xFF	; 255
    2aac:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab8:	fc 01       	movw	r30, r24
    2aba:	e2 0f       	add	r30, r18
    2abc:	f3 1f       	adc	r31, r19
    2abe:	80 81       	ld	r24, Z
    2ac0:	88 23       	and	r24, r24
    2ac2:	39 f7       	brne	.-50     	; 0x2a92 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(u8 row,u8 col)
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <LCD_moveCursor+0x6>
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <LCD_moveCursor+0x8>
    2ad8:	0f 92       	push	r0
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	8a 83       	std	Y+2, r24	; 0x02
    2ae0:	6b 83       	std	Y+3, r22	; 0x03
	u8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	3d 83       	std	Y+5, r19	; 0x05
    2aea:	2c 83       	std	Y+4, r18	; 0x04
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	9d 81       	ldd	r25, Y+5	; 0x05
    2af0:	81 30       	cpi	r24, 0x01	; 1
    2af2:	91 05       	cpc	r25, r1
    2af4:	c1 f0       	breq	.+48     	; 0x2b26 <LCD_moveCursor+0x56>
    2af6:	2c 81       	ldd	r18, Y+4	; 0x04
    2af8:	3d 81       	ldd	r19, Y+5	; 0x05
    2afa:	22 30       	cpi	r18, 0x02	; 2
    2afc:	31 05       	cpc	r19, r1
    2afe:	2c f4       	brge	.+10     	; 0x2b0a <LCD_moveCursor+0x3a>
    2b00:	8c 81       	ldd	r24, Y+4	; 0x04
    2b02:	9d 81       	ldd	r25, Y+5	; 0x05
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	61 f0       	breq	.+24     	; 0x2b20 <LCD_moveCursor+0x50>
    2b08:	19 c0       	rjmp	.+50     	; 0x2b3c <LCD_moveCursor+0x6c>
    2b0a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b0c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b0e:	22 30       	cpi	r18, 0x02	; 2
    2b10:	31 05       	cpc	r19, r1
    2b12:	69 f0       	breq	.+26     	; 0x2b2e <LCD_moveCursor+0x5e>
    2b14:	8c 81       	ldd	r24, Y+4	; 0x04
    2b16:	9d 81       	ldd	r25, Y+5	; 0x05
    2b18:	83 30       	cpi	r24, 0x03	; 3
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	61 f0       	breq	.+24     	; 0x2b36 <LCD_moveCursor+0x66>
    2b1e:	0e c0       	rjmp	.+28     	; 0x2b3c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	0b c0       	rjmp	.+22     	; 0x2b3c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	80 5c       	subi	r24, 0xC0	; 192
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	07 c0       	rjmp	.+14     	; 0x2b3c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	80 5f       	subi	r24, 0xF0	; 240
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	03 c0       	rjmp	.+6      	; 0x2b3c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	80 5b       	subi	r24, 0xB0	; 176
    2b3a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	80 68       	ori	r24, 0x80	; 128
    2b40:	0e 94 61 11 	call	0x22c2	; 0x22c2 <LCD_sendCommand>
}
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(u8 row,u8 col,const char *Str)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <LCD_displayStringRowColumn+0x6>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <LCD_displayStringRowColumn+0x8>
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	6a 83       	std	Y+2, r22	; 0x02
    2b64:	5c 83       	std	Y+4, r21	; 0x04
    2b66:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	6a 81       	ldd	r22, Y+2	; 0x02
    2b6c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
}
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	62 97       	sbiw	r28, 0x12	; 18
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	9a 8b       	std	Y+18, r25	; 0x12
    2b9c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2b9e:	89 89       	ldd	r24, Y+17	; 0x11
    2ba0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba2:	9e 01       	movw	r18, r28
    2ba4:	2f 5f       	subi	r18, 0xFF	; 255
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	b9 01       	movw	r22, r18
    2baa:	4a e0       	ldi	r20, 0x0A	; 10
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <itoa>
   LCD_displayString(buff); /* Display the string */
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	01 96       	adiw	r24, 0x01	; 1
    2bb6:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
}
    2bba:	62 96       	adiw	r28, 0x12	; 18
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <LCD_sendCommand>
}
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <__udivmodhi4>:
    2be0:	aa 1b       	sub	r26, r26
    2be2:	bb 1b       	sub	r27, r27
    2be4:	51 e1       	ldi	r21, 0x11	; 17
    2be6:	07 c0       	rjmp	.+14     	; 0x2bf6 <__udivmodhi4_ep>

00002be8 <__udivmodhi4_loop>:
    2be8:	aa 1f       	adc	r26, r26
    2bea:	bb 1f       	adc	r27, r27
    2bec:	a6 17       	cp	r26, r22
    2bee:	b7 07       	cpc	r27, r23
    2bf0:	10 f0       	brcs	.+4      	; 0x2bf6 <__udivmodhi4_ep>
    2bf2:	a6 1b       	sub	r26, r22
    2bf4:	b7 0b       	sbc	r27, r23

00002bf6 <__udivmodhi4_ep>:
    2bf6:	88 1f       	adc	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	5a 95       	dec	r21
    2bfc:	a9 f7       	brne	.-22     	; 0x2be8 <__udivmodhi4_loop>
    2bfe:	80 95       	com	r24
    2c00:	90 95       	com	r25
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	08 95       	ret

00002c08 <__prologue_saves__>:
    2c08:	2f 92       	push	r2
    2c0a:	3f 92       	push	r3
    2c0c:	4f 92       	push	r4
    2c0e:	5f 92       	push	r5
    2c10:	6f 92       	push	r6
    2c12:	7f 92       	push	r7
    2c14:	8f 92       	push	r8
    2c16:	9f 92       	push	r9
    2c18:	af 92       	push	r10
    2c1a:	bf 92       	push	r11
    2c1c:	cf 92       	push	r12
    2c1e:	df 92       	push	r13
    2c20:	ef 92       	push	r14
    2c22:	ff 92       	push	r15
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	ca 1b       	sub	r28, r26
    2c32:	db 0b       	sbc	r29, r27
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	cd bf       	out	0x3d, r28	; 61
    2c3e:	09 94       	ijmp

00002c40 <__epilogue_restores__>:
    2c40:	2a 88       	ldd	r2, Y+18	; 0x12
    2c42:	39 88       	ldd	r3, Y+17	; 0x11
    2c44:	48 88       	ldd	r4, Y+16	; 0x10
    2c46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c52:	b9 84       	ldd	r11, Y+9	; 0x09
    2c54:	c8 84       	ldd	r12, Y+8	; 0x08
    2c56:	df 80       	ldd	r13, Y+7	; 0x07
    2c58:	ee 80       	ldd	r14, Y+6	; 0x06
    2c5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c60:	aa 81       	ldd	r26, Y+2	; 0x02
    2c62:	b9 81       	ldd	r27, Y+1	; 0x01
    2c64:	ce 0f       	add	r28, r30
    2c66:	d1 1d       	adc	r29, r1
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	ed 01       	movw	r28, r26
    2c74:	08 95       	ret

00002c76 <itoa>:
    2c76:	fb 01       	movw	r30, r22
    2c78:	9f 01       	movw	r18, r30
    2c7a:	e8 94       	clt
    2c7c:	42 30       	cpi	r20, 0x02	; 2
    2c7e:	c4 f0       	brlt	.+48     	; 0x2cb0 <itoa+0x3a>
    2c80:	45 32       	cpi	r20, 0x25	; 37
    2c82:	b4 f4       	brge	.+44     	; 0x2cb0 <itoa+0x3a>
    2c84:	4a 30       	cpi	r20, 0x0A	; 10
    2c86:	29 f4       	brne	.+10     	; 0x2c92 <itoa+0x1c>
    2c88:	97 fb       	bst	r25, 7
    2c8a:	1e f4       	brtc	.+6      	; 0x2c92 <itoa+0x1c>
    2c8c:	90 95       	com	r25
    2c8e:	81 95       	neg	r24
    2c90:	9f 4f       	sbci	r25, 0xFF	; 255
    2c92:	64 2f       	mov	r22, r20
    2c94:	77 27       	eor	r23, r23
    2c96:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__udivmodhi4>
    2c9a:	80 5d       	subi	r24, 0xD0	; 208
    2c9c:	8a 33       	cpi	r24, 0x3A	; 58
    2c9e:	0c f0       	brlt	.+2      	; 0x2ca2 <itoa+0x2c>
    2ca0:	89 5d       	subi	r24, 0xD9	; 217
    2ca2:	81 93       	st	Z+, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	a1 f7       	brne	.-24     	; 0x2c92 <itoa+0x1c>
    2caa:	16 f4       	brtc	.+4      	; 0x2cb0 <itoa+0x3a>
    2cac:	5d e2       	ldi	r21, 0x2D	; 45
    2cae:	51 93       	st	Z+, r21
    2cb0:	10 82       	st	Z, r1
    2cb2:	c9 01       	movw	r24, r18
    2cb4:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <strrev>

00002cb8 <strrev>:
    2cb8:	dc 01       	movw	r26, r24
    2cba:	fc 01       	movw	r30, r24
    2cbc:	67 2f       	mov	r22, r23
    2cbe:	71 91       	ld	r23, Z+
    2cc0:	77 23       	and	r23, r23
    2cc2:	e1 f7       	brne	.-8      	; 0x2cbc <strrev+0x4>
    2cc4:	32 97       	sbiw	r30, 0x02	; 2
    2cc6:	04 c0       	rjmp	.+8      	; 0x2cd0 <strrev+0x18>
    2cc8:	7c 91       	ld	r23, X
    2cca:	6d 93       	st	X+, r22
    2ccc:	70 83       	st	Z, r23
    2cce:	62 91       	ld	r22, -Z
    2cd0:	ae 17       	cp	r26, r30
    2cd2:	bf 07       	cpc	r27, r31
    2cd4:	c8 f3       	brcs	.-14     	; 0x2cc8 <strrev+0x10>
    2cd6:	08 95       	ret

00002cd8 <_exit>:
    2cd8:	f8 94       	cli

00002cda <__stop_program>:
    2cda:	ff cf       	rjmp	.-2      	; 0x2cda <__stop_program>
